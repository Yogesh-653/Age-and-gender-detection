{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Yogesh-653/Age-and-gender-detection/blob/main/CNN%20Model%20and%20YOLOv5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZPeNAbuZMH49"
      },
      "source": [
        "**1. Basic CNN Model**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ETMROBn1PJBU",
        "outputId": "2e188bda-465d-4aa8-d118-f3d39ebf12a3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n",
            "Epoch 1/100\n",
            "34/34 [==============================] - ETA: 0s - loss: 589.1268 - mae: 17.1600"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "34/34 [==============================] - 122s 4s/step - loss: 589.1268 - mae: 17.1600 - val_loss: 411.9064 - val_mae: 16.2000\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 120s 4s/step - loss: 418.9904 - mae: 14.6384 - val_loss: 390.3970 - val_mae: 16.0974\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 127s 4s/step - loss: 364.7969 - mae: 13.7193 - val_loss: 320.9505 - val_mae: 11.8625\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 138s 4s/step - loss: 321.6372 - mae: 12.6769 - val_loss: 295.6081 - val_mae: 11.6457\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 140s 4s/step - loss: 271.9399 - mae: 11.8619 - val_loss: 295.1407 - val_mae: 13.3931\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 136s 4s/step - loss: 205.0101 - mae: 10.6216 - val_loss: 281.4784 - val_mae: 12.4931\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 151s 4s/step - loss: 145.9655 - mae: 8.8710 - val_loss: 295.0859 - val_mae: 12.4237\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 169s 5s/step - loss: 94.6851 - mae: 7.3850 - val_loss: 298.3204 - val_mae: 12.4046\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 158s 5s/step - loss: 70.4188 - mae: 6.2095 - val_loss: 332.4592 - val_mae: 13.9062\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 63.0679 - mae: 6.0304 - val_loss: 356.0701 - val_mae: 13.4000\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 41.7580 - mae: 4.8258 - val_loss: 309.2529 - val_mae: 12.5898\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 24.1700 - mae: 3.5767 - val_loss: 302.0909 - val_mae: 12.4020\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 17.1889 - mae: 3.0343 - val_loss: 311.6657 - val_mae: 12.6342\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 114s 3s/step - loss: 14.5927 - mae: 2.6869 - val_loss: 316.9195 - val_mae: 13.0459\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 17.2178 - mae: 2.6324 - val_loss: 306.3677 - val_mae: 12.8030\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 12.7054 - mae: 2.4273 - val_loss: 313.9597 - val_mae: 12.7539\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 9.2445 - mae: 2.1732 - val_loss: 308.5863 - val_mae: 12.7182\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 8.2400 - mae: 2.0836 - val_loss: 308.4684 - val_mae: 12.7885\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 6.7685 - mae: 1.8195 - val_loss: 312.9642 - val_mae: 12.6305\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 6.7134 - mae: 1.7173 - val_loss: 317.1164 - val_mae: 13.0107\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 5.1194 - mae: 1.5520 - val_loss: 310.7187 - val_mae: 12.6764\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 4.1984 - mae: 1.3958 - val_loss: 314.8154 - val_mae: 12.9645\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 5.2376 - mae: 1.4641 - val_loss: 313.9703 - val_mae: 12.7744\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 5.6782 - mae: 1.4548 - val_loss: 311.7952 - val_mae: 13.0617\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 8.2125 - mae: 1.8337 - val_loss: 323.0672 - val_mae: 12.8171\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 10.0879 - mae: 2.0039 - val_loss: 310.9757 - val_mae: 12.9710\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 6.8231 - mae: 1.6366 - val_loss: 322.4435 - val_mae: 12.8733\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 5.8213 - mae: 1.6411 - val_loss: 314.9198 - val_mae: 12.7320\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 4.1572 - mae: 1.4283 - val_loss: 311.0893 - val_mae: 12.6820\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 5.8801 - mae: 1.6865 - val_loss: 322.3461 - val_mae: 12.9305\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 6.3289 - mae: 1.7114 - val_loss: 316.5979 - val_mae: 12.9423\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 4.7615 - mae: 1.4738 - val_loss: 317.6047 - val_mae: 12.8861\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 4.0372 - mae: 1.3884 - val_loss: 314.2145 - val_mae: 12.8749\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 2.8818 - mae: 1.0874 - val_loss: 318.4886 - val_mae: 12.8853\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 1.7793 - mae: 0.7973 - val_loss: 312.5539 - val_mae: 12.8700\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 2.6567 - mae: 1.0125 - val_loss: 315.1950 - val_mae: 12.9301\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 2.7090 - mae: 1.0586 - val_loss: 310.9204 - val_mae: 12.7192\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 2.9605 - mae: 1.1519 - val_loss: 310.7473 - val_mae: 12.7148\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 3.3067 - mae: 1.1674 - val_loss: 322.4695 - val_mae: 12.8248\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 3.9943 - mae: 1.2735 - val_loss: 306.4572 - val_mae: 12.7907\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 6.5523 - mae: 1.7922 - val_loss: 311.9856 - val_mae: 12.9732\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 5.7253 - mae: 1.6184 - val_loss: 312.8358 - val_mae: 12.6151\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 6.0252 - mae: 1.6954 - val_loss: 311.3784 - val_mae: 12.7997\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 6.3417 - mae: 1.7736 - val_loss: 328.3562 - val_mae: 12.8071\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 5.2980 - mae: 1.6603 - val_loss: 312.8752 - val_mae: 12.6092\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 4.2589 - mae: 1.3911 - val_loss: 312.7915 - val_mae: 12.6826\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 3.3701 - mae: 1.2182 - val_loss: 312.3987 - val_mae: 12.7121\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 7.8975 - mae: 2.0485 - val_loss: 312.5420 - val_mae: 12.7217\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 9.3599 - mae: 2.2153 - val_loss: 310.9310 - val_mae: 12.8687\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 6.5215 - mae: 1.7201 - val_loss: 321.4058 - val_mae: 12.7942\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 117s 3s/step - loss: 4.5746 - mae: 1.4862 - val_loss: 311.4168 - val_mae: 12.6089\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 6.0763 - mae: 1.6638 - val_loss: 314.4980 - val_mae: 13.0377\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 117s 3s/step - loss: 5.7547 - mae: 1.6521 - val_loss: 323.9644 - val_mae: 12.8659\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 4.5037 - mae: 1.4225 - val_loss: 318.8621 - val_mae: 12.6597\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 5.3020 - mae: 1.5244 - val_loss: 309.5454 - val_mae: 12.6773\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 6.5964 - mae: 1.8082 - val_loss: 323.0072 - val_mae: 13.1181\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 5.9150 - mae: 1.7366 - val_loss: 321.3250 - val_mae: 13.0704\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 5.3134 - mae: 1.6549 - val_loss: 310.1649 - val_mae: 12.7398\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 4.3642 - mae: 1.3896 - val_loss: 312.9249 - val_mae: 12.5680\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 3.4932 - mae: 1.2729 - val_loss: 311.6185 - val_mae: 12.7364\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 3.1947 - mae: 1.1600 - val_loss: 304.7053 - val_mae: 12.5548\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 3.8420 - mae: 1.2734 - val_loss: 316.5598 - val_mae: 12.7132\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 5.5275 - mae: 1.7013 - val_loss: 315.5157 - val_mae: 12.9318\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 5.4034 - mae: 1.6759 - val_loss: 309.7655 - val_mae: 12.5287\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 4.9057 - mae: 1.4552 - val_loss: 309.2403 - val_mae: 12.7789\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 3.1833 - mae: 1.1814 - val_loss: 315.5584 - val_mae: 12.6803\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 3.2589 - mae: 1.1607 - val_loss: 304.0907 - val_mae: 12.5754\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 2.4471 - mae: 0.9728 - val_loss: 312.4264 - val_mae: 12.8513\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 2.7325 - mae: 1.0311 - val_loss: 309.1616 - val_mae: 12.6714\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 2.6691 - mae: 0.9937 - val_loss: 311.2115 - val_mae: 12.6657\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 2.8296 - mae: 1.0641 - val_loss: 305.6313 - val_mae: 12.5341\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 2.5569 - mae: 0.9570 - val_loss: 311.5190 - val_mae: 12.8432\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 3.8675 - mae: 1.2182 - val_loss: 305.2477 - val_mae: 12.7974\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 6.3273 - mae: 1.6426 - val_loss: 313.4545 - val_mae: 12.8817\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 6.3478 - mae: 1.5757 - val_loss: 308.3246 - val_mae: 12.5941\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 5.8965 - mae: 1.4876 - val_loss: 306.4767 - val_mae: 12.7326\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 5.6873 - mae: 1.6008 - val_loss: 303.3033 - val_mae: 12.4897\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 5.8542 - mae: 1.5552 - val_loss: 316.2850 - val_mae: 12.7629\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 4.4278 - mae: 1.3274 - val_loss: 307.4714 - val_mae: 12.4959\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 6.2075 - mae: 1.6606 - val_loss: 332.2645 - val_mae: 13.6612\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 11.3218 - mae: 2.4044 - val_loss: 304.8707 - val_mae: 12.3025\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 9.8023 - mae: 2.0736 - val_loss: 315.6493 - val_mae: 12.8326\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 5.7780 - mae: 1.5595 - val_loss: 309.7321 - val_mae: 12.6576\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 5.6404 - mae: 1.5722 - val_loss: 306.6992 - val_mae: 12.6520\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 100s 3s/step - loss: 6.3438 - mae: 1.7829 - val_loss: 305.6936 - val_mae: 12.5768\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 5.5468 - mae: 1.5885 - val_loss: 318.0318 - val_mae: 12.7968\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 3.3770 - mae: 1.2237 - val_loss: 309.6396 - val_mae: 12.6896\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 3.7424 - mae: 1.2227 - val_loss: 310.6781 - val_mae: 12.5949\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 2.5848 - mae: 1.1090 - val_loss: 309.3377 - val_mae: 12.8307\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 2.7579 - mae: 1.0956 - val_loss: 306.7116 - val_mae: 12.5041\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 2.4969 - mae: 0.9848 - val_loss: 305.5950 - val_mae: 12.4776\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 2.1162 - mae: 0.9551 - val_loss: 305.4668 - val_mae: 12.4943\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 3.2499 - mae: 1.0989 - val_loss: 316.6988 - val_mae: 12.6104\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 3.4754 - mae: 1.2387 - val_loss: 311.3934 - val_mae: 12.7117\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 2.2012 - mae: 0.9203 - val_loss: 308.1190 - val_mae: 12.5920\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 1.6219 - mae: 0.7766 - val_loss: 318.7142 - val_mae: 13.1631\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 12.5413 - mae: 2.1317 - val_loss: 307.3239 - val_mae: 12.4987\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 34.5422 - mae: 4.2282 - val_loss: 328.9382 - val_mae: 12.9834\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 26.8037 - mae: 3.5727 - val_loss: 317.5549 - val_mae: 12.7878\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 10.8208 - mae: 2.2936 - val_loss: 316.2955 - val_mae: 12.5014\n",
            "Epoch 1/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 0.9135 - accuracy: 0.5475 - val_loss: 0.6739 - val_accuracy: 0.5570\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 118s 3s/step - loss: 0.5977 - accuracy: 0.6783 - val_loss: 0.6262 - val_accuracy: 0.6272\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.4736 - accuracy: 0.7676 - val_loss: 0.6476 - val_accuracy: 0.6404\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.2911 - accuracy: 0.8881 - val_loss: 0.8127 - val_accuracy: 0.6623\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.1482 - accuracy: 0.9483 - val_loss: 1.1770 - val_accuracy: 0.5526\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0728 - accuracy: 0.9878 - val_loss: 1.3294 - val_accuracy: 0.6184\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 0.0432 - accuracy: 0.9925 - val_loss: 1.3414 - val_accuracy: 0.6272\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0396 - accuracy: 0.9953 - val_loss: 1.4040 - val_accuracy: 0.6491\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0278 - accuracy: 0.9944 - val_loss: 1.5354 - val_accuracy: 0.6140\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0231 - accuracy: 0.9991 - val_loss: 1.7141 - val_accuracy: 0.6360\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0290 - accuracy: 0.9981 - val_loss: 1.7286 - val_accuracy: 0.6140\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0082 - accuracy: 0.9991 - val_loss: 2.0082 - val_accuracy: 0.6228\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 0.0112 - accuracy: 0.9981 - val_loss: 2.0002 - val_accuracy: 0.6316\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0185 - accuracy: 0.9981 - val_loss: 1.8326 - val_accuracy: 0.6184\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0238 - accuracy: 0.9981 - val_loss: 1.8785 - val_accuracy: 0.6184\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0106 - accuracy: 0.9991 - val_loss: 1.7927 - val_accuracy: 0.6272\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0130 - accuracy: 0.9991 - val_loss: 1.9932 - val_accuracy: 0.6184\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0139 - accuracy: 0.9981 - val_loss: 1.7940 - val_accuracy: 0.6447\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0086 - accuracy: 0.9981 - val_loss: 1.8262 - val_accuracy: 0.6316\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 0.0131 - accuracy: 0.9981 - val_loss: 1.6155 - val_accuracy: 0.6228\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0053 - accuracy: 0.9991 - val_loss: 1.8773 - val_accuracy: 0.6316\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 0.0047 - accuracy: 0.9991 - val_loss: 1.9456 - val_accuracy: 0.6447\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0027 - accuracy: 0.9981 - val_loss: 1.9884 - val_accuracy: 0.6360\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0022 - accuracy: 0.9981 - val_loss: 2.0649 - val_accuracy: 0.6316\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0017 - accuracy: 0.9991 - val_loss: 2.1103 - val_accuracy: 0.6228\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0024 - accuracy: 0.9991 - val_loss: 2.1113 - val_accuracy: 0.6272\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0019 - accuracy: 0.9991 - val_loss: 2.1066 - val_accuracy: 0.6228\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 2.1824 - val_accuracy: 0.6228\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0024 - accuracy: 0.9991 - val_loss: 2.1604 - val_accuracy: 0.6228\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0020 - accuracy: 0.9981 - val_loss: 2.1624 - val_accuracy: 0.6272\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0019 - accuracy: 0.9991 - val_loss: 2.1600 - val_accuracy: 0.6272\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0046 - accuracy: 0.9981 - val_loss: 2.0095 - val_accuracy: 0.6272\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 0.0017 - accuracy: 0.9991 - val_loss: 2.0678 - val_accuracy: 0.6316\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.1432 - val_accuracy: 0.6228\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0015 - accuracy: 0.9991 - val_loss: 2.2160 - val_accuracy: 0.6140\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.2227 - val_accuracy: 0.6228\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.2413 - val_accuracy: 0.6228\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0016 - accuracy: 0.9981 - val_loss: 2.2686 - val_accuracy: 0.6228\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 0.0017 - accuracy: 0.9991 - val_loss: 2.2910 - val_accuracy: 0.6360\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.3262 - val_accuracy: 0.6272\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.3610 - val_accuracy: 0.6272\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0015 - accuracy: 0.9991 - val_loss: 2.3842 - val_accuracy: 0.6272\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.3996 - val_accuracy: 0.6316\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.4271 - val_accuracy: 0.6360\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0014 - accuracy: 0.9981 - val_loss: 2.4529 - val_accuracy: 0.6316\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0016 - accuracy: 0.9981 - val_loss: 2.4468 - val_accuracy: 0.6316\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.4708 - val_accuracy: 0.6316\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 110s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.4954 - val_accuracy: 0.6272\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5123 - val_accuracy: 0.6272\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5241 - val_accuracy: 0.6316\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5469 - val_accuracy: 0.6272\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5648 - val_accuracy: 0.6272\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5871 - val_accuracy: 0.6272\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6029 - val_accuracy: 0.6228\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6243 - val_accuracy: 0.6272\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 100s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6398 - val_accuracy: 0.6228\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6609 - val_accuracy: 0.6228\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6718 - val_accuracy: 0.6228\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6600 - val_accuracy: 0.6184\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6819 - val_accuracy: 0.6184\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.6985 - val_accuracy: 0.6184\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 97s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7147 - val_accuracy: 0.6184\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7275 - val_accuracy: 0.6184\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7417 - val_accuracy: 0.6228\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 100s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7567 - val_accuracy: 0.6184\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7674 - val_accuracy: 0.6228\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7800 - val_accuracy: 0.6228\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 100s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.7912 - val_accuracy: 0.6228\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8040 - val_accuracy: 0.6228\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8156 - val_accuracy: 0.6228\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8235 - val_accuracy: 0.6228\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8320 - val_accuracy: 0.6228\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8452 - val_accuracy: 0.6228\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8570 - val_accuracy: 0.6228\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8637 - val_accuracy: 0.6228\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8752 - val_accuracy: 0.6228\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8820 - val_accuracy: 0.6228\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8924 - val_accuracy: 0.6228\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9029 - val_accuracy: 0.6228\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9093 - val_accuracy: 0.6228\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 109s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9166 - val_accuracy: 0.6228\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9268 - val_accuracy: 0.6272\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0013 - accuracy: 0.9981 - val_loss: 2.7807 - val_accuracy: 0.6228\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8037 - val_accuracy: 0.6184\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8248 - val_accuracy: 0.6184\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8418 - val_accuracy: 0.6228\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8504 - val_accuracy: 0.6228\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 105s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8629 - val_accuracy: 0.6228\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 104s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8738 - val_accuracy: 0.6228\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 106s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8862 - val_accuracy: 0.6228\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8955 - val_accuracy: 0.6228\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9078 - val_accuracy: 0.6228\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 111s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9182 - val_accuracy: 0.6228\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9005 - val_accuracy: 0.6184\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 102s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8599 - val_accuracy: 0.6228\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 107s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8732 - val_accuracy: 0.6228\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.8931 - val_accuracy: 0.6184\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 112s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9042 - val_accuracy: 0.6228\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 108s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9231 - val_accuracy: 0.6184\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 103s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.9391 - val_accuracy: 0.6184\n",
            "8/8 [==============================] - 5s 650ms/step - loss: 384.0053 - mae: 13.9960\n",
            "Age Model Test MAE: 13.99598217010498\n",
            "8/8 [==============================] - 5s 575ms/step - loss: 2.3234 - accuracy: 0.6842\n",
            "Gender Model Test Accuracy: 0.6842105388641357\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential, load_model, Model\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input, BatchNormalization, Activation, Add, AveragePooling2D\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from pathlib import Path\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Function to extract age and gender from the filename\n",
        "def extract_label(filename):\n",
        "    try:\n",
        "        parts = filename.split('_')\n",
        "        age = int(parts[0])\n",
        "        gender = int(parts[1])  # Assuming 0 for male and 1 for female\n",
        "        return age, gender\n",
        "    except ValueError:\n",
        "        print(f\"Skipping file with unexpected filename format: {filename}\")\n",
        "        return None, None\n",
        "\n",
        "# Function to load images and labels from a given folder\n",
        "def load_images_from_folder(folder):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "\n",
        "    # Iterate over all files in the folder\n",
        "    for filename in os.listdir(folder):\n",
        "        # Construct the full file path\n",
        "        file_path = folder / filename\n",
        "        # Read the image file\n",
        "        img = cv2.imread(str(file_path))\n",
        "        if img is not None:\n",
        "            # Resize the image\n",
        "            img = cv2.resize(img, (224, 224))  # Resize images to 224x224\n",
        "            age, gender = extract_label(filename)\n",
        "            if age is not None and gender is not None:  # Only add images with valid labels\n",
        "                images.append(img)\n",
        "                age_labels.append(age)\n",
        "                gender_labels.append(gender)\n",
        "\n",
        "    # Convert lists to numpy arrays\n",
        "    images = np.array(images, dtype='float32') / 255.0  # Normalize images\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Define path to your dataset folder in Google Drive\n",
        "folder_path = Path('/content/drive/MyDrive/HGGK')\n",
        "\n",
        "# Load images and labels\n",
        "images, age_labels, gender_labels = load_images_from_folder(folder_path)\n",
        "\n",
        "# Split data for age and gender detection\n",
        "X_train_age, X_val_test_age, y_train_age, y_val_test_age = train_test_split(images, age_labels, test_size=0.3, random_state=42)\n",
        "X_val_age, X_test_age, y_val_age, y_test_age = train_test_split(X_val_test_age, y_val_test_age, test_size=0.5, random_state=42)\n",
        "\n",
        "X_train_gender, X_val_test_gender, y_train_gender, y_val_test_gender = train_test_split(images, gender_labels, test_size=0.3, random_state=42)\n",
        "X_val_gender, X_test_gender, y_val_gender, y_test_gender = train_test_split(X_val_test_gender, y_val_test_gender, test_size=0.5, random_state=42)\n",
        "\n",
        "# Define CNN model for age detection (regression)\n",
        "age_model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(1)  # Output layer with one neuron for regression\n",
        "])\n",
        "\n",
        "# Define CNN model for gender detection (binary classification)\n",
        "gender_model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(1, activation='sigmoid')  # Output layer with one neuron for binary classification\n",
        "])\n",
        "\n",
        "# Compile the models\n",
        "age_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "gender_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Set up the checkpoint directory\n",
        "checkpoint_dir = '/content/drive/MyDrive/HGGK/MODEL2/checkpoints/'\n",
        "\n",
        "\n",
        "\n",
        "# Train the age model with checkpointing\n",
        "age_model.fit(\n",
        "    X_train_age, y_train_age,\n",
        "    validation_data=(X_val_age, y_val_age),\n",
        "    epochs=100,\n",
        "    callbacks=[age_checkpoint_callback]  # Add the checkpoint callback here\n",
        ")\n",
        "\n",
        "# Train the gender model with checkpointing\n",
        "gender_model.fit(\n",
        "    X_train_gender, y_train_gender,\n",
        "    validation_data=(X_val_gender, y_val_gender),\n",
        "    epochs=100,\n",
        "    callbacks=[gender_checkpoint_callback]  # Add the checkpoint callback here\n",
        ")\n",
        "\n",
        "# Evaluate the age model (optional)\n",
        "age_test_loss, age_test_mae = age_model.evaluate(X_test_age, y_test_age)\n",
        "print('Age Model Test MAE:', age_test_mae)\n",
        "\n",
        "# Evaluate the gender model (optional)\n",
        "gender_test_loss, gender_test_acc = gender_model.evaluate(X_test_gender, y_test_gender)\n",
        "print('Gender Model Test Accuracy:', gender_test_acc)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Basic CNN with graph**"
      ],
      "metadata": {
        "id": "MTOaapkz0qPa"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ToujTJrT029m",
        "outputId": "9b2d65bb-6805-4f0c-f13d-def000a0b21c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Epoch 1/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 568.6476 - mae: 17.0559 - val_loss: 370.7522 - val_mae: 13.4203\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 376.8379 - mae: 13.4202 - val_loss: 344.1607 - val_mae: 13.4055\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 97s 3s/step - loss: 330.1740 - mae: 12.9743 - val_loss: 365.0936 - val_mae: 12.7882\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 91s 3s/step - loss: 316.1697 - mae: 12.5333 - val_loss: 339.2138 - val_mae: 12.3887\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 254.7929 - mae: 11.4510 - val_loss: 394.5916 - val_mae: 15.9898\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 97s 3s/step - loss: 211.8306 - mae: 10.8299 - val_loss: 324.5469 - val_mae: 12.0969\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 146.1057 - mae: 8.7035 - val_loss: 326.2330 - val_mae: 12.8355\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 98.9784 - mae: 7.2952 - val_loss: 305.5301 - val_mae: 12.1281\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 68.6321 - mae: 6.0888 - val_loss: 333.2863 - val_mae: 13.1321\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 48.2655 - mae: 5.1591 - val_loss: 341.0370 - val_mae: 13.5803\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 36.9281 - mae: 4.4386 - val_loss: 349.1454 - val_mae: 13.4274\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 34.5484 - mae: 4.4350 - val_loss: 369.5626 - val_mae: 13.9107\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 26.5462 - mae: 3.8335 - val_loss: 359.6364 - val_mae: 13.4664\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 25.5364 - mae: 3.7794 - val_loss: 362.0148 - val_mae: 13.7282\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 19.0793 - mae: 3.1102 - val_loss: 355.3584 - val_mae: 13.3766\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 15.0124 - mae: 2.5678 - val_loss: 380.8666 - val_mae: 14.1660\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 15.2416 - mae: 2.7745 - val_loss: 385.4406 - val_mae: 14.0452\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 11.1445 - mae: 2.3401 - val_loss: 352.6621 - val_mae: 13.3587\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 96s 3s/step - loss: 8.3133 - mae: 2.0935 - val_loss: 362.1146 - val_mae: 13.5017\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 6.3110 - mae: 1.6977 - val_loss: 390.5005 - val_mae: 14.2999\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 6.1565 - mae: 1.8261 - val_loss: 364.3278 - val_mae: 13.7015\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 4.9829 - mae: 1.4842 - val_loss: 363.7841 - val_mae: 13.6483\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 91s 3s/step - loss: 4.6321 - mae: 1.3317 - val_loss: 370.3441 - val_mae: 13.8234\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 6.6921 - mae: 1.6070 - val_loss: 372.9095 - val_mae: 13.8017\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 8.5354 - mae: 1.9397 - val_loss: 360.3499 - val_mae: 13.5172\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 6.3906 - mae: 1.5218 - val_loss: 368.3145 - val_mae: 13.5964\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 7.4703 - mae: 1.6205 - val_loss: 365.9530 - val_mae: 13.5513\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 91s 3s/step - loss: 4.7688 - mae: 1.4337 - val_loss: 364.6630 - val_mae: 13.5388\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 5.1922 - mae: 1.3584 - val_loss: 366.1695 - val_mae: 13.5356\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 4.2626 - mae: 1.3372 - val_loss: 366.3406 - val_mae: 13.5515\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 3.1680 - mae: 1.1363 - val_loss: 370.1799 - val_mae: 13.5956\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 3.2468 - mae: 1.2276 - val_loss: 374.2072 - val_mae: 13.7956\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 3.0747 - mae: 1.1072 - val_loss: 364.4727 - val_mae: 13.5875\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 3.3149 - mae: 1.1651 - val_loss: 368.7841 - val_mae: 13.7678\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 3.2791 - mae: 1.1456 - val_loss: 367.7926 - val_mae: 13.6814\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 3.7525 - mae: 1.2673 - val_loss: 366.6982 - val_mae: 13.5767\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 3.8195 - mae: 1.3012 - val_loss: 368.7104 - val_mae: 13.6204\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 6.0751 - mae: 1.7679 - val_loss: 371.8302 - val_mae: 13.7117\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 4.3118 - mae: 1.3014 - val_loss: 369.0041 - val_mae: 13.6471\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 3.9165 - mae: 1.2317 - val_loss: 371.7032 - val_mae: 13.7450\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 4.3197 - mae: 1.2680 - val_loss: 376.4415 - val_mae: 13.8775\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 4.9514 - mae: 1.3273 - val_loss: 366.4964 - val_mae: 13.5601\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 5.3674 - mae: 1.3454 - val_loss: 372.5801 - val_mae: 13.6805\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 5.9677 - mae: 1.6324 - val_loss: 376.5344 - val_mae: 13.9446\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 4.5800 - mae: 1.3508 - val_loss: 375.4459 - val_mae: 13.7518\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 3.0652 - mae: 1.0737 - val_loss: 366.9933 - val_mae: 13.6249\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 3.1774 - mae: 1.1337 - val_loss: 380.2935 - val_mae: 13.9431\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 9.3538 - mae: 1.8228 - val_loss: 391.2701 - val_mae: 14.2427\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 8.0441 - mae: 1.7937 - val_loss: 369.1978 - val_mae: 13.5569\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 6.1527 - mae: 1.6201 - val_loss: 374.8089 - val_mae: 13.7703\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 7.4713 - mae: 1.7104 - val_loss: 375.4659 - val_mae: 13.9784\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 9.4989 - mae: 2.1640 - val_loss: 365.3550 - val_mae: 13.5860\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 7.8919 - mae: 1.9153 - val_loss: 362.0081 - val_mae: 13.5438\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 4.9889 - mae: 1.5120 - val_loss: 366.2780 - val_mae: 13.5152\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 98s 3s/step - loss: 3.9831 - mae: 1.2476 - val_loss: 370.3109 - val_mae: 13.7312\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 4.1042 - mae: 1.2828 - val_loss: 359.4667 - val_mae: 13.4937\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 3.9260 - mae: 1.2607 - val_loss: 361.3866 - val_mae: 13.5021\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 3.5924 - mae: 1.2106 - val_loss: 371.3916 - val_mae: 13.7410\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 3.2083 - mae: 1.1227 - val_loss: 356.9510 - val_mae: 13.3713\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 2.5884 - mae: 1.0113 - val_loss: 361.5699 - val_mae: 13.4364\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 2.1947 - mae: 0.9094 - val_loss: 359.9151 - val_mae: 13.4192\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 2.6134 - mae: 0.9290 - val_loss: 370.1437 - val_mae: 13.7355\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 1.8700 - mae: 0.8236 - val_loss: 359.3211 - val_mae: 13.4547\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 1.8219 - mae: 0.7806 - val_loss: 364.0941 - val_mae: 13.5026\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 2.4419 - mae: 0.9507 - val_loss: 362.6960 - val_mae: 13.5725\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 2.1096 - mae: 0.8821 - val_loss: 357.6251 - val_mae: 13.4781\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 2.3191 - mae: 0.9615 - val_loss: 357.5808 - val_mae: 13.3650\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 2.7359 - mae: 0.9801 - val_loss: 359.9557 - val_mae: 13.4749\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 2.6293 - mae: 0.9745 - val_loss: 356.7745 - val_mae: 13.3320\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 101s 3s/step - loss: 3.4094 - mae: 1.2085 - val_loss: 364.1043 - val_mae: 13.5236\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 95s 3s/step - loss: 2.6579 - mae: 1.0025 - val_loss: 355.7990 - val_mae: 13.3622\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 2.0189 - mae: 0.8409 - val_loss: 365.3227 - val_mae: 13.6161\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 3.1677 - mae: 1.0191 - val_loss: 364.0872 - val_mae: 13.6770\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 99s 3s/step - loss: 3.0048 - mae: 1.1807 - val_loss: 366.3002 - val_mae: 13.5595\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 2.9103 - mae: 1.0174 - val_loss: 361.6418 - val_mae: 13.4655\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 91s 3s/step - loss: 3.0480 - mae: 1.0600 - val_loss: 360.4957 - val_mae: 13.4338\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 4.2342 - mae: 1.3217 - val_loss: 373.3805 - val_mae: 13.8602\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.6636 - mae: 1.3977 - val_loss: 375.3900 - val_mae: 13.8062\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 4.4766 - mae: 1.4230 - val_loss: 353.2192 - val_mae: 13.1456\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.6779 - mae: 1.5397 - val_loss: 364.2464 - val_mae: 13.5644\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.6730 - mae: 1.5289 - val_loss: 362.2650 - val_mae: 13.4988\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 4.7581 - mae: 1.5408 - val_loss: 360.3036 - val_mae: 13.4301\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.0031 - mae: 1.2879 - val_loss: 358.4043 - val_mae: 13.4524\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 3.6540 - mae: 1.3006 - val_loss: 360.0540 - val_mae: 13.3499\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 4.5783 - mae: 1.3991 - val_loss: 364.3476 - val_mae: 13.5928\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 5.0990 - mae: 1.4825 - val_loss: 357.8044 - val_mae: 13.4715\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 5.1647 - mae: 1.4297 - val_loss: 375.4488 - val_mae: 13.9140\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.1975 - mae: 1.3654 - val_loss: 368.6228 - val_mae: 13.7313\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 5.0881 - mae: 1.4578 - val_loss: 361.2649 - val_mae: 13.3919\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.4020 - mae: 1.3525 - val_loss: 366.9610 - val_mae: 13.6749\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 6.1874 - mae: 1.5783 - val_loss: 363.2734 - val_mae: 13.5149\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 4.8719 - mae: 1.5056 - val_loss: 359.2199 - val_mae: 13.4268\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 6.5294 - mae: 1.6851 - val_loss: 354.9919 - val_mae: 13.2921\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 6.2990 - mae: 1.6702 - val_loss: 370.1146 - val_mae: 13.8015\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 5.7362 - mae: 1.5697 - val_loss: 350.6690 - val_mae: 13.2401\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 4.1104 - mae: 1.4043 - val_loss: 355.5519 - val_mae: 13.3561\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 3.5192 - mae: 1.3493 - val_loss: 358.2377 - val_mae: 13.4517\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 5.7321 - mae: 1.6841 - val_loss: 356.8271 - val_mae: 13.5068\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 5.5204 - mae: 1.5827 - val_loss: 353.5207 - val_mae: 13.3617\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 4.2454 - mae: 1.4271 - val_loss: 352.8700 - val_mae: 13.2943\n",
            "Epoch 1/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 1.1378 - accuracy: 0.5804 - val_loss: 0.6683 - val_accuracy: 0.5965\n",
            "Epoch 2/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.6296 - accuracy: 0.6246 - val_loss: 0.6488 - val_accuracy: 0.6053\n",
            "Epoch 3/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.5282 - accuracy: 0.7498 - val_loss: 0.6253 - val_accuracy: 0.6184\n",
            "Epoch 4/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.3995 - accuracy: 0.8288 - val_loss: 0.6898 - val_accuracy: 0.6798\n",
            "Epoch 5/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.2319 - accuracy: 0.9219 - val_loss: 1.0592 - val_accuracy: 0.6579\n",
            "Epoch 6/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.1512 - accuracy: 0.9548 - val_loss: 0.8011 - val_accuracy: 0.6535\n",
            "Epoch 7/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0785 - accuracy: 0.9859 - val_loss: 1.0377 - val_accuracy: 0.6404\n",
            "Epoch 8/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 0.0606 - accuracy: 0.9906 - val_loss: 1.0543 - val_accuracy: 0.6447\n",
            "Epoch 9/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0463 - accuracy: 0.9925 - val_loss: 1.2134 - val_accuracy: 0.6623\n",
            "Epoch 10/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0511 - accuracy: 0.9934 - val_loss: 1.1867 - val_accuracy: 0.6272\n",
            "Epoch 11/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0525 - accuracy: 0.9906 - val_loss: 1.1919 - val_accuracy: 0.6842\n",
            "Epoch 12/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0523 - accuracy: 0.9934 - val_loss: 1.2146 - val_accuracy: 0.6316\n",
            "Epoch 13/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0303 - accuracy: 0.9972 - val_loss: 1.2444 - val_accuracy: 0.6491\n",
            "Epoch 14/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0296 - accuracy: 0.9953 - val_loss: 1.2995 - val_accuracy: 0.6447\n",
            "Epoch 15/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0271 - accuracy: 0.9953 - val_loss: 1.1176 - val_accuracy: 0.6535\n",
            "Epoch 16/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0328 - accuracy: 0.9944 - val_loss: 1.2085 - val_accuracy: 0.7018\n",
            "Epoch 17/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0184 - accuracy: 0.9962 - val_loss: 1.2522 - val_accuracy: 0.6579\n",
            "Epoch 18/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0366 - accuracy: 0.9953 - val_loss: 1.2567 - val_accuracy: 0.6491\n",
            "Epoch 19/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0169 - accuracy: 0.9962 - val_loss: 1.1967 - val_accuracy: 0.6623\n",
            "Epoch 20/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0237 - accuracy: 0.9962 - val_loss: 1.2205 - val_accuracy: 0.6798\n",
            "Epoch 21/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0298 - accuracy: 0.9944 - val_loss: 1.0828 - val_accuracy: 0.6623\n",
            "Epoch 22/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 0.0195 - accuracy: 0.9962 - val_loss: 1.6324 - val_accuracy: 0.6491\n",
            "Epoch 23/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0311 - accuracy: 0.9962 - val_loss: 1.0587 - val_accuracy: 0.6535\n",
            "Epoch 24/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0368 - accuracy: 0.9953 - val_loss: 1.2616 - val_accuracy: 0.6491\n",
            "Epoch 25/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0565 - accuracy: 0.9934 - val_loss: 1.0536 - val_accuracy: 0.6360\n",
            "Epoch 26/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0319 - accuracy: 0.9944 - val_loss: 1.2681 - val_accuracy: 0.6535\n",
            "Epoch 27/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0263 - accuracy: 0.9953 - val_loss: 1.1392 - val_accuracy: 0.6360\n",
            "Epoch 28/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0219 - accuracy: 0.9953 - val_loss: 1.2954 - val_accuracy: 0.6316\n",
            "Epoch 29/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0176 - accuracy: 0.9962 - val_loss: 1.4033 - val_accuracy: 0.6579\n",
            "Epoch 30/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0168 - accuracy: 0.9962 - val_loss: 1.2949 - val_accuracy: 0.6447\n",
            "Epoch 31/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0265 - accuracy: 0.9953 - val_loss: 1.2665 - val_accuracy: 0.6447\n",
            "Epoch 32/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 0.0116 - accuracy: 0.9962 - val_loss: 1.3980 - val_accuracy: 0.6316\n",
            "Epoch 33/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0131 - accuracy: 0.9953 - val_loss: 1.3860 - val_accuracy: 0.6404\n",
            "Epoch 34/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0120 - accuracy: 0.9962 - val_loss: 1.3355 - val_accuracy: 0.6404\n",
            "Epoch 35/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0110 - accuracy: 0.9944 - val_loss: 1.3622 - val_accuracy: 0.6447\n",
            "Epoch 36/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0103 - accuracy: 0.9953 - val_loss: 1.3213 - val_accuracy: 0.6491\n",
            "Epoch 37/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0118 - accuracy: 0.9944 - val_loss: 1.3953 - val_accuracy: 0.6316\n",
            "Epoch 38/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 0.0130 - accuracy: 0.9944 - val_loss: 1.2298 - val_accuracy: 0.6711\n",
            "Epoch 39/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0087 - accuracy: 0.9953 - val_loss: 1.4049 - val_accuracy: 0.6535\n",
            "Epoch 40/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0108 - accuracy: 0.9953 - val_loss: 1.4555 - val_accuracy: 0.6360\n",
            "Epoch 41/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0104 - accuracy: 0.9962 - val_loss: 1.3723 - val_accuracy: 0.6316\n",
            "Epoch 42/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0084 - accuracy: 0.9944 - val_loss: 1.4454 - val_accuracy: 0.6360\n",
            "Epoch 43/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0100 - accuracy: 0.9953 - val_loss: 1.3745 - val_accuracy: 0.6404\n",
            "Epoch 44/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0076 - accuracy: 0.9953 - val_loss: 1.4724 - val_accuracy: 0.6360\n",
            "Epoch 45/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0074 - accuracy: 0.9953 - val_loss: 1.4813 - val_accuracy: 0.6447\n",
            "Epoch 46/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0094 - accuracy: 0.9934 - val_loss: 1.3867 - val_accuracy: 0.6360\n",
            "Epoch 47/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0093 - accuracy: 0.9953 - val_loss: 1.4582 - val_accuracy: 0.6404\n",
            "Epoch 48/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0091 - accuracy: 0.9944 - val_loss: 1.4682 - val_accuracy: 0.6316\n",
            "Epoch 49/100\n",
            "34/34 [==============================] - 94s 3s/step - loss: 0.0081 - accuracy: 0.9953 - val_loss: 1.4770 - val_accuracy: 0.6316\n",
            "Epoch 50/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0106 - accuracy: 0.9934 - val_loss: 1.4749 - val_accuracy: 0.6404\n",
            "Epoch 51/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0091 - accuracy: 0.9925 - val_loss: 1.5898 - val_accuracy: 0.6404\n",
            "Epoch 52/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0131 - accuracy: 0.9953 - val_loss: 1.2433 - val_accuracy: 0.6404\n",
            "Epoch 53/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0095 - accuracy: 0.9953 - val_loss: 1.4638 - val_accuracy: 0.6535\n",
            "Epoch 54/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0091 - accuracy: 0.9953 - val_loss: 1.5288 - val_accuracy: 0.6447\n",
            "Epoch 55/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0116 - accuracy: 0.9962 - val_loss: 1.6884 - val_accuracy: 0.6579\n",
            "Epoch 56/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0132 - accuracy: 0.9953 - val_loss: 1.8465 - val_accuracy: 0.6404\n",
            "Epoch 57/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0130 - accuracy: 0.9953 - val_loss: 1.5928 - val_accuracy: 0.6404\n",
            "Epoch 58/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0097 - accuracy: 0.9962 - val_loss: 1.5743 - val_accuracy: 0.6447\n",
            "Epoch 59/100\n",
            "34/34 [==============================] - 90s 3s/step - loss: 0.0127 - accuracy: 0.9944 - val_loss: 2.1065 - val_accuracy: 0.6535\n",
            "Epoch 60/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0519 - accuracy: 0.9831 - val_loss: 2.1398 - val_accuracy: 0.6009\n",
            "Epoch 61/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0973 - accuracy: 0.9671 - val_loss: 2.0573 - val_accuracy: 0.6360\n",
            "Epoch 62/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.1292 - accuracy: 0.9595 - val_loss: 2.0842 - val_accuracy: 0.6228\n",
            "Epoch 63/100\n",
            "34/34 [==============================] - 86s 3s/step - loss: 0.0382 - accuracy: 0.9906 - val_loss: 2.2263 - val_accuracy: 0.6140\n",
            "Epoch 64/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 0.0305 - accuracy: 0.9887 - val_loss: 2.3022 - val_accuracy: 0.5877\n",
            "Epoch 65/100\n",
            "34/34 [==============================] - 86s 3s/step - loss: 0.0113 - accuracy: 0.9962 - val_loss: 2.4933 - val_accuracy: 0.6228\n",
            "Epoch 66/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0139 - accuracy: 0.9934 - val_loss: 2.4562 - val_accuracy: 0.6316\n",
            "Epoch 67/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0144 - accuracy: 0.9934 - val_loss: 2.4048 - val_accuracy: 0.6316\n",
            "Epoch 68/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0107 - accuracy: 0.9962 - val_loss: 2.3088 - val_accuracy: 0.6140\n",
            "Epoch 69/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0124 - accuracy: 0.9953 - val_loss: 2.4157 - val_accuracy: 0.6272\n",
            "Epoch 70/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0085 - accuracy: 0.9934 - val_loss: 2.4209 - val_accuracy: 0.6272\n",
            "Epoch 71/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0107 - accuracy: 0.9934 - val_loss: 2.4007 - val_accuracy: 0.6316\n",
            "Epoch 72/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0090 - accuracy: 0.9944 - val_loss: 2.5058 - val_accuracy: 0.6316\n",
            "Epoch 73/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0081 - accuracy: 0.9962 - val_loss: 2.4311 - val_accuracy: 0.6316\n",
            "Epoch 74/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0103 - accuracy: 0.9953 - val_loss: 2.3346 - val_accuracy: 0.6360\n",
            "Epoch 75/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0070 - accuracy: 0.9953 - val_loss: 2.4482 - val_accuracy: 0.6316\n",
            "Epoch 76/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0088 - accuracy: 0.9934 - val_loss: 2.4683 - val_accuracy: 0.6316\n",
            "Epoch 77/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0083 - accuracy: 0.9934 - val_loss: 2.4131 - val_accuracy: 0.6360\n",
            "Epoch 78/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0072 - accuracy: 0.9953 - val_loss: 2.4563 - val_accuracy: 0.6360\n",
            "Epoch 79/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0066 - accuracy: 0.9953 - val_loss: 2.5494 - val_accuracy: 0.6360\n",
            "Epoch 80/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0071 - accuracy: 0.9953 - val_loss: 2.4818 - val_accuracy: 0.6360\n",
            "Epoch 81/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0075 - accuracy: 0.9934 - val_loss: 2.4977 - val_accuracy: 0.6447\n",
            "Epoch 82/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0075 - accuracy: 0.9934 - val_loss: 2.4651 - val_accuracy: 0.6404\n",
            "Epoch 83/100\n",
            "34/34 [==============================] - 92s 3s/step - loss: 0.0070 - accuracy: 0.9944 - val_loss: 2.4831 - val_accuracy: 0.6404\n",
            "Epoch 84/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0066 - accuracy: 0.9944 - val_loss: 2.4855 - val_accuracy: 0.6316\n",
            "Epoch 85/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0083 - accuracy: 0.9953 - val_loss: 2.4147 - val_accuracy: 0.6316\n",
            "Epoch 86/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0073 - accuracy: 0.9944 - val_loss: 2.4678 - val_accuracy: 0.6228\n",
            "Epoch 87/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0076 - accuracy: 0.9962 - val_loss: 2.4720 - val_accuracy: 0.6316\n",
            "Epoch 88/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0073 - accuracy: 0.9962 - val_loss: 2.4052 - val_accuracy: 0.6316\n",
            "Epoch 89/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0060 - accuracy: 0.9944 - val_loss: 2.5438 - val_accuracy: 0.6228\n",
            "Epoch 90/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0073 - accuracy: 0.9953 - val_loss: 2.5149 - val_accuracy: 0.6272\n",
            "Epoch 91/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0067 - accuracy: 0.9962 - val_loss: 2.4317 - val_accuracy: 0.6272\n",
            "Epoch 92/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0064 - accuracy: 0.9934 - val_loss: 2.4674 - val_accuracy: 0.6228\n",
            "Epoch 93/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0063 - accuracy: 0.9953 - val_loss: 2.4980 - val_accuracy: 0.6228\n",
            "Epoch 94/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0063 - accuracy: 0.9934 - val_loss: 2.5177 - val_accuracy: 0.6228\n",
            "Epoch 95/100\n",
            "34/34 [==============================] - 93s 3s/step - loss: 0.0072 - accuracy: 0.9953 - val_loss: 2.4410 - val_accuracy: 0.6272\n",
            "Epoch 96/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0064 - accuracy: 0.9953 - val_loss: 2.4379 - val_accuracy: 0.6228\n",
            "Epoch 97/100\n",
            "34/34 [==============================] - 88s 3s/step - loss: 0.0071 - accuracy: 0.9953 - val_loss: 2.4201 - val_accuracy: 0.6272\n",
            "Epoch 98/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0060 - accuracy: 0.9944 - val_loss: 2.4652 - val_accuracy: 0.6272\n",
            "Epoch 99/100\n",
            "34/34 [==============================] - 89s 3s/step - loss: 0.0063 - accuracy: 0.9934 - val_loss: 2.4646 - val_accuracy: 0.6316\n",
            "Epoch 100/100\n",
            "34/34 [==============================] - 87s 3s/step - loss: 0.0060 - accuracy: 0.9934 - val_loss: 2.4786 - val_accuracy: 0.6316\n",
            "8/8 [==============================] - 6s 744ms/step - loss: 374.8982 - mae: 14.1052\n",
            "Age Model Test MAE: 14.105249404907227\n",
            "8/8 [==============================] - 4s 494ms/step - loss: 3.1395 - accuracy: 0.6096\n",
            "Gender Model Test Accuracy: 0.609649121761322\n"
          ]
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path\n",
        "\n",
        "# Mount Google Drive (only necessary in Google Colab)\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Function to extract age and gender from file names\n",
        "def extract_label(filename):\n",
        "    parts = filename.split('_')\n",
        "    age = int(parts[0])\n",
        "    gender = int(parts[1])\n",
        "    return age, gender\n",
        "\n",
        "# Function to load images and labels from the dataset\n",
        "def load_images_from_folder(folder):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "    for filename in os.listdir(folder):\n",
        "        img = cv2.imread(os.path.join(folder, filename))\n",
        "        if img is not None:\n",
        "            img = cv2.resize(img, (224, 224))\n",
        "            age, gender = extract_label(filename)\n",
        "            images.append(img)\n",
        "            age_labels.append(age)\n",
        "            gender_labels.append(gender)\n",
        "    images = np.array(images, dtype='float32') / 255.0\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Set the path to your dataset\n",
        "folder_path = Path('/content/drive/MyDrive/1500')\n",
        "images, age_labels, gender_labels = load_images_from_folder(folder_path)\n",
        "\n",
        "# Splitting the data into training, validation, and test sets\n",
        "X_train_age, X_val_test_age, y_train_age, y_val_test_age = train_test_split(images, age_labels, test_size=0.3, random_state=42)\n",
        "X_val_age, X_test_age, y_val_age, y_test_age = train_test_split(X_val_test_age, y_val_test_age, test_size=0.5, random_state=42)\n",
        "X_train_gender, X_val_test_gender, y_train_gender, y_val_test_gender = train_test_split(images, gender_labels, test_size=0.3, random_state=42)\n",
        "X_val_gender, X_test_gender, y_val_gender, y_test_gender = train_test_split(X_val_test_gender, y_val_test_gender, test_size=0.5, random_state=42)\n",
        "\n",
        "# Building CNN models\n",
        "def build_age_model():\n",
        "    model = Sequential([\n",
        "        Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Conv2D(64, (3, 3), activation='relu'),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Flatten(),\n",
        "        Dense(128, activation='relu'),\n",
        "        Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "    return model\n",
        "\n",
        "def build_gender_model():\n",
        "    model = Sequential([\n",
        "        Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Conv2D(64, (3, 3), activation='relu'),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Flatten(),\n",
        "        Dense(128, activation='relu'),\n",
        "        Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# Create model instances\n",
        "age_model = build_age_model()\n",
        "gender_model = build_gender_model()\n",
        "\n",
        "# Training the models\n",
        "age_history = age_model.fit(X_train_age, y_train_age, validation_data=(X_val_age, y_val_age), epochs=100)\n",
        "gender_history = gender_model.fit(X_train_gender, y_train_gender, validation_data=(X_val_gender, y_val_gender), epochs=100)\n",
        "\n",
        "# Evaluating the models\n",
        "age_test_loss, age_test_mae = age_model.evaluate(X_test_age, y_test_age)\n",
        "print('Age Model Test MAE:', age_test_mae)\n",
        "gender_test_loss, gender_test_acc = gender_model.evaluate(X_test_gender, y_test_gender)\n",
        "print('Gender Model Test Accuracy:', gender_test_acc)\n",
        "\n",
        "# Plotting the training and validation loss for the age model\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(age_history.history['loss'], label='Training Loss')\n",
        "plt.plot(age_history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Age Model Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "# Plotting the training and validation accuracy for the gender model\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(gender_history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(gender_history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Gender Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fLq5VJ9bN1Hq"
      },
      "source": [
        "**2. Saving the Model to drive**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "E7mDJVXciboA",
        "outputId": "9523282e-3453-453b-b82f-382c7218bfda"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        }
      ],
      "source": [
        "# Save the final trained models\n",
        "final_age_model_path = '/content/drive/MyDrive/HGGK/MODEL2/age_model_final.h5'\n",
        "final_gender_model_path = '/content/drive/MyDrive/HGGK/MODEL2/gender_model_final.h5'\n",
        "age_model.save(final_age_model_path)\n",
        "gender_model.save(final_gender_model_path)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ne0AozSrM1qV"
      },
      "source": [
        "**3. Sample input image testing**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "kN9FS8cib-aj",
        "outputId": "62ecfb18-2174-4892-e8af-175fd3155bdc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "WARNING:tensorflow:6 out of the last 6 calls to <function Model.make_predict_function.<locals>.predict_function at 0x79cb5bc28160> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 181ms/step\n",
            "Predicted Age: 33.67253112792969\n",
            "1/1 [==============================] - 0s 178ms/step\n",
            "Predicted Gender: Male\n",
            "1/1 [==============================] - 0s 440ms/step\n",
            "Predicted Emotion: Surprise\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "# Paths to your saved models\n",
        "age_model_path = '/content/drive/MyDrive/1500/MODEL2/age_model_final.h5'\n",
        "gender_model_path = '/content/drive/MyDrive/1500/MODEL2/gender_model_final.h5'\n",
        "emotion_model_path = '/content/drive/MyDrive/emotion_little_vgg_2.h5'  # Update with the correct path\n",
        "\n",
        "# Load the models\n",
        "age_model = load_model(age_model_path)\n",
        "gender_model = load_model(gender_model_path)\n",
        "emotion_model = load_model(emotion_model_path)  # Load the emotion classifier model\n",
        "\n",
        "def preprocess_image(image_path, size=(224, 224), color_mode='rgb'):\n",
        "    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE if color_mode == 'grayscale' else cv2.IMREAD_COLOR)\n",
        "    if img is None:\n",
        "        print(f\"Failed to load image: {image_path}\")\n",
        "        return None\n",
        "    img = cv2.resize(img, size)\n",
        "    img = img / 255.0\n",
        "    if color_mode == 'grayscale':\n",
        "        img = np.expand_dims(img, axis=-1)  # Add channel dimension for grayscale\n",
        "    return img.reshape(1, *size, img.shape[-1])\n",
        "\n",
        "# Example usage\n",
        "test_image_path = '/content/drive/MyDrive/1500/32_0_4_20170117140145171.jpg'\n",
        "processed_image = preprocess_image(test_image_path)  # For age and gender\n",
        "emotion_image = preprocess_image(test_image_path, size=(48, 48), color_mode='grayscale')  # For emotion\n",
        "\n",
        "# Predict age\n",
        "predicted_age = age_model.predict(processed_image)\n",
        "print(f\"Predicted Age: {predicted_age[0][0]}\")\n",
        "\n",
        "# Predict gender\n",
        "predicted_gender_prob = gender_model.predict(processed_image)\n",
        "predicted_gender = \"Male\" if predicted_gender_prob[0][0] < 0.5 else \"Female\"\n",
        "print(f\"Predicted Gender: {predicted_gender}\")\n",
        "\n",
        "# Predict emotion\n",
        "predicted_emotion_prob = emotion_model.predict(emotion_image)\n",
        "predicted_emotion = np.argmax(predicted_emotion_prob, axis=1)\n",
        "emotion_labels = ['Happy', 'Sad', 'Angry', 'Surprise', 'Fear' , 'Neutral']  # Update with your actual labels\n",
        "predicted_emotion_label = emotion_labels[predicted_emotion[0]]\n",
        "print(f\"Predicted Emotion: {predicted_emotion_label}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4. Evalution metrices for basic CNN**\n",
        "\n",
        "---\n",
        "\n"
      ],
      "metadata": {
        "id": "Td_rq6bO1yaG"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.models import load_model\n",
        "from sklearn.metrics import mean_absolute_error, classification_report, accuracy_score\n",
        "\n",
        "# Function to load images and labels for testing\n",
        "def load_images_from_folder(folder, img_size=(224, 224)):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "    for filename in os.listdir(folder):\n",
        "        if filename.endswith(\".jpg\") or filename.endswith(\".png\"):\n",
        "            img = cv2.imread(os.path.join(folder, filename))\n",
        "            img = cv2.resize(img, img_size)\n",
        "            img = img / 255.0  # Normalize pixel values\n",
        "            images.append(img)\n",
        "            age, gender = filename.split('_')[0:2]\n",
        "            age_labels.append(int(age))\n",
        "            gender_labels.append(int(gender))\n",
        "    images = np.array(images, dtype='float32')\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Load the test data\n",
        "test_data_folder = '/content/drive/MyDrive/1500'  # Update this path to your folder of test images\n",
        "X_test, y_test_age, y_test_gender = load_images_from_folder(test_data_folder)\n",
        "\n",
        "# Load the models\n",
        "age_model_path = '/content/drive/MyDrive/1500/MODEL2/age_model_final.h5'\n",
        "gender_model_path = '/content/drive/MyDrive/1500/MODEL2/gender_model_final.h5'\n",
        "age_model = load_model(age_model_path)\n",
        "gender_model = load_model(gender_model_path)\n",
        "\n",
        "# Predict on the test data\n",
        "predicted_ages = age_model.predict(X_test).flatten()\n",
        "predicted_genders = gender_model.predict(X_test).flatten()\n",
        "\n",
        "# For gender, we need to convert probabilities to binary values (e.g., 0 or 1)\n",
        "predicted_genders_binary = np.round(predicted_genders)\n",
        "\n",
        "# Calculate Mean Absolute Error for age predictions\n",
        "mae = mean_absolute_error(y_test_age, predicted_ages)\n",
        "print(f\"Mean Absolute Error for Age Model: {mae}\")\n",
        "\n",
        "# Calculate classification metrics for gender predictions\n",
        "gender_accuracy = accuracy_score(y_test_gender, predicted_genders_binary)\n",
        "report = classification_report(y_test_gender, predicted_genders_binary, target_names=['Male', 'Female'])\n",
        "print(f\"Accuracy for Gender Model: {gender_accuracy}\")\n",
        "print(\"Classification Report for Gender Model:\")\n",
        "print(report)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "9AeDgpmyRVGO",
        "outputId": "231ccffb-0898-4127-c514-62c2c6dc21d5"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "48/48 [==============================] - 51s 1s/step\n",
            "48/48 [==============================] - 39s 809ms/step\n",
            "Mean Absolute Error for Age Model: 5.144403089105181\n",
            "Accuracy for Gender Model: 0.8946675444371297\n",
            "Classification Report for Gender Model:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        Male       0.89      0.86      0.88       658\n",
            "      Female       0.90      0.92      0.91       861\n",
            "\n",
            "    accuracy                           0.89      1519\n",
            "   macro avg       0.89      0.89      0.89      1519\n",
            "weighted avg       0.89      0.89      0.89      1519\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y-PCxcmWPQx0"
      },
      "source": [
        "**4.Sample input images testing for the model YOLOv5**\n",
        "\n",
        "\n",
        "\n",
        "  \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ustIQf53J6fU",
        "outputId": "52cdadcc-6244-4c06-b2b7-ba21d2d9e1ca"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "YOLOv5 🚀 v7.0-247-g3f02fde Python-3.10.12 torch-2.1.0+cu118 CPU\n",
            "\n",
            "Fusing layers... \n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "YOLOv5s summary: 213 layers, 7225885 parameters, 0 gradients, 16.4 GFLOPs\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "1/1 [==============================] - 0s 137ms/step\n",
            "1/1 [==============================] - 0s 142ms/step\n",
            "Detected: Age: 36.32455825805664, Gender: Male\n"
          ]
        }
      ],
      "source": [
        "# Import necessary libraries\n",
        "import torch\n",
        "import numpy as np\n",
        "import cv2\n",
        "from PIL import Image\n",
        "from models.common import DetectMultiBackend\n",
        "from utils.general import non_max_suppression, check_img_size\n",
        "from utils.augmentations import letterbox\n",
        "from utils.torch_utils import select_device\n",
        "from tensorflow.keras.models import load_model\n",
        "from google.colab import drive\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Function to load the YOLOv5 model\n",
        "def load_yolov5_model(weights_path, device):\n",
        "    model = DetectMultiBackend(weights_path, device=device)\n",
        "    model.eval()\n",
        "    return model\n",
        "\n",
        "# Function to preprocess images for YOLOv5\n",
        "def preprocess_image_yolo(image_path, img_size=640):\n",
        "    try:\n",
        "        img0 = Image.open(image_path).convert('RGB')\n",
        "    except IOError:\n",
        "        print(f\"Error: Unable to open image file {image_path}.\")\n",
        "        return None, None\n",
        "\n",
        "    img0 = np.array(img0)\n",
        "    img = letterbox(img0, img_size)[0]\n",
        "    img = img.transpose((2, 0, 1))  # HWC to CHW\n",
        "    img = np.ascontiguousarray(img)\n",
        "    img = torch.from_numpy(img).to(device)\n",
        "    img = img.float()  # uint8 to fp16/32\n",
        "    img /= 255  # Normalize\n",
        "    if len(img.shape) == 3:\n",
        "        img = img.unsqueeze(0)\n",
        "    return img, img0\n",
        "\n",
        "# Function to preprocess images for age and gender models\n",
        "def preprocess_image_for_age_gender(image, size=224):\n",
        "    image = cv2.resize(image, (size, size))  # Resize image\n",
        "    image = image.astype('float32') / 255.0  # Normalize\n",
        "    image = np.expand_dims(image, axis=0)  # Add batch dimension\n",
        "    return image\n",
        "\n",
        "# Function to run YOLOv5 and get predictions\n",
        "def run_yolo_on_image(model, img):\n",
        "    pred = model(img, augment=False, visualize=False)[0]\n",
        "    pred = non_max_suppression(pred, 0.25, 0.45, classes=None, agnostic=False, max_det=1000)\n",
        "    return pred\n",
        "\n",
        "# Load models\n",
        "device = select_device('')  # Select device (cpu or cuda)\n",
        "yolo_weights = 'yolov5s.pt'  # Path to YOLOv5 weights\n",
        "age_model_path = '/content/drive/MyDrive/2000/age2000_model.h5'\n",
        "gender_model_path = '/content/drive/MyDrive/2000/gender2000_model.h5'\n",
        "emotion_model_path = '/content/drive/MyDrive/emotion_little_vgg_2.h5\n",
        "yolo_model = load_yolov5_model(yolo_weights, device)\n",
        "age_model = load_model(age_model_path)\n",
        "gender_model = load_model(gender_model_path)\n",
        "\n",
        "# Main image processing function\n",
        "# Main image processing function\n",
        "def process_image(image_path):\n",
        "    img, img0 = preprocess_image_yolo(image_path)\n",
        "    if img is None or img0 is None:\n",
        "        return  # Exit if image preprocessing failed\n",
        "\n",
        "    pred = run_yolo_on_image(yolo_model, img)\n",
        "\n",
        "    for i, det in enumerate(pred):  # detections per image\n",
        "        if len(det):\n",
        "            # Take only the first detected face\n",
        "            *xyxy, conf, cls = det[0]\n",
        "            x1, y1, x2, y2 = map(int, xyxy)\n",
        "            if isinstance(img0, np.ndarray):\n",
        "                img0 = Image.fromarray(img0)\n",
        "            face_img = img0.crop((x1, y1, x2, y2))\n",
        "            processed_face = preprocess_image_for_age_gender(np.array(face_img))\n",
        "            age = age_model.predict(processed_face)[0][0]\n",
        "            gender_prob = gender_model.predict(processed_face)[0][0]\n",
        "            gender = 'Male' if gender_prob < 0.5 else 'Female'\n",
        "\n",
        "            print(f'Detected: Age: {age}, Gender: {gender}')\n",
        "            break  # Exit the loop after processing the first face\n",
        "\n",
        "# Example usage\n",
        "test_image_path = '/content/drive/MyDrive/HGGK/SAMPh/32_0_4_20170117140145171.jpg'\n",
        "process_image(test_image_path)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "id": "MvWMfkoVsass"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lR6TWMjPPhaS"
      },
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ry2NKBuhPpQM"
      },
      "source": [
        "**5. CNN Model for higher images**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yJhPRxNLVgUa",
        "outputId": "472468ba-37bb-4e1f-db71-a32fe9bc1f83"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Mounted at /content/drive\n",
            "Epoch 1/100\n",
            "35/35 [==============================] - ETA: 0s - loss: 265.1042 - mae: 10.5026"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "35/35 [==============================] - 101s 3s/step - loss: 265.1042 - mae: 10.5026 - val_loss: 167.2431 - val_mae: 7.3895\n",
            "Epoch 2/100\n",
            "35/35 [==============================] - 108s 3s/step - loss: 138.2834 - mae: 6.7730 - val_loss: 154.3522 - val_mae: 6.5523\n",
            "Epoch 3/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 126.4536 - mae: 6.1840 - val_loss: 157.8838 - val_mae: 6.5482\n",
            "Epoch 4/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 116.4936 - mae: 5.7447 - val_loss: 153.1350 - val_mae: 6.1737\n",
            "Epoch 5/100\n",
            "35/35 [==============================] - 113s 3s/step - loss: 113.7739 - mae: 5.9474 - val_loss: 149.0250 - val_mae: 6.1909\n",
            "Epoch 6/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 100.5053 - mae: 5.6661 - val_loss: 167.4299 - val_mae: 8.1557\n",
            "Epoch 7/100\n",
            "35/35 [==============================] - 113s 3s/step - loss: 85.9322 - mae: 5.2020 - val_loss: 147.5881 - val_mae: 6.7971\n",
            "Epoch 8/100\n",
            "35/35 [==============================] - 101s 3s/step - loss: 61.7481 - mae: 4.6575 - val_loss: 140.4023 - val_mae: 6.5535\n",
            "Epoch 9/100\n",
            "35/35 [==============================] - 101s 3s/step - loss: 45.9900 - mae: 4.1311 - val_loss: 139.6392 - val_mae: 7.3107\n",
            "Epoch 10/100\n",
            "35/35 [==============================] - 110s 3s/step - loss: 28.8540 - mae: 3.4922 - val_loss: 138.0850 - val_mae: 6.9728\n",
            "Epoch 11/100\n",
            "35/35 [==============================] - 107s 3s/step - loss: 20.3149 - mae: 3.0816 - val_loss: 144.9499 - val_mae: 7.4425\n",
            "Epoch 12/100\n",
            "35/35 [==============================] - 113s 3s/step - loss: 11.3503 - mae: 2.3569 - val_loss: 135.9323 - val_mae: 7.1263\n",
            "Epoch 13/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 8.3640 - mae: 2.0510 - val_loss: 142.8468 - val_mae: 7.2646\n",
            "Epoch 14/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 7.0343 - mae: 1.8526 - val_loss: 141.6516 - val_mae: 7.2356\n",
            "Epoch 15/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 7.2942 - mae: 1.8601 - val_loss: 145.9812 - val_mae: 7.0293\n",
            "Epoch 16/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 6.9136 - mae: 1.8146 - val_loss: 148.4727 - val_mae: 7.5229\n",
            "Epoch 17/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 3.9376 - mae: 1.3453 - val_loss: 143.4105 - val_mae: 7.2718\n",
            "Epoch 18/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 3.4333 - mae: 1.1879 - val_loss: 145.4985 - val_mae: 7.3229\n",
            "Epoch 19/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 4.1304 - mae: 1.3060 - val_loss: 144.2966 - val_mae: 7.3423\n",
            "Epoch 20/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 3.8410 - mae: 1.2464 - val_loss: 145.9951 - val_mae: 7.2610\n",
            "Epoch 21/100\n",
            "35/35 [==============================] - 107s 3s/step - loss: 3.5619 - mae: 1.1466 - val_loss: 147.0315 - val_mae: 7.6574\n",
            "Epoch 22/100\n",
            "35/35 [==============================] - 112s 3s/step - loss: 3.9665 - mae: 1.2878 - val_loss: 150.4237 - val_mae: 7.3979\n",
            "Epoch 23/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 3.1322 - mae: 1.2759 - val_loss: 147.3635 - val_mae: 7.2852\n",
            "Epoch 24/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 1.9680 - mae: 0.9265 - val_loss: 145.8817 - val_mae: 7.4106\n",
            "Epoch 25/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 1.5315 - mae: 0.7703 - val_loss: 148.0339 - val_mae: 7.2255\n",
            "Epoch 26/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 1.7418 - mae: 0.8875 - val_loss: 144.8628 - val_mae: 7.3774\n",
            "Epoch 27/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 1.4593 - mae: 0.7490 - val_loss: 146.2334 - val_mae: 7.2338\n",
            "Epoch 28/100\n",
            "35/35 [==============================] - 115s 3s/step - loss: 1.3677 - mae: 0.7130 - val_loss: 149.1385 - val_mae: 7.4937\n",
            "Epoch 29/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 0.9497 - mae: 0.6151 - val_loss: 147.8742 - val_mae: 7.4046\n",
            "Epoch 30/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.7787 - mae: 0.5914 - val_loss: 148.0841 - val_mae: 7.4018\n",
            "Epoch 31/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 0.7278 - mae: 0.5735 - val_loss: 147.9821 - val_mae: 7.3906\n",
            "Epoch 32/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.6874 - mae: 0.5186 - val_loss: 148.6692 - val_mae: 7.5023\n",
            "Epoch 33/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.7034 - mae: 0.5449 - val_loss: 148.5880 - val_mae: 7.3896\n",
            "Epoch 34/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.5519 - mae: 0.4493 - val_loss: 148.0974 - val_mae: 7.4541\n",
            "Epoch 35/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.6402 - mae: 0.4819 - val_loss: 148.3949 - val_mae: 7.4186\n",
            "Epoch 36/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.9553 - mae: 0.5424 - val_loss: 147.6778 - val_mae: 7.5789\n",
            "Epoch 37/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 1.8612 - mae: 0.8077 - val_loss: 146.1392 - val_mae: 7.3064\n",
            "Epoch 38/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 4.1143 - mae: 1.4407 - val_loss: 147.8298 - val_mae: 7.4724\n",
            "Epoch 39/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 3.1672 - mae: 1.1704 - val_loss: 144.0219 - val_mae: 7.1795\n",
            "Epoch 40/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 2.0952 - mae: 0.9440 - val_loss: 148.4744 - val_mae: 7.3606\n",
            "Epoch 41/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 1.2165 - mae: 0.7007 - val_loss: 149.7919 - val_mae: 7.4719\n",
            "Epoch 42/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 1.0029 - mae: 0.6721 - val_loss: 149.7488 - val_mae: 7.4399\n",
            "Epoch 43/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.8363 - mae: 0.6454 - val_loss: 147.0407 - val_mae: 7.3722\n",
            "Epoch 44/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.6505 - mae: 0.5879 - val_loss: 150.3009 - val_mae: 7.4584\n",
            "Epoch 45/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 0.8589 - mae: 0.6806 - val_loss: 148.2785 - val_mae: 7.3910\n",
            "Epoch 46/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.5279 - mae: 0.4867 - val_loss: 149.3020 - val_mae: 7.4270\n",
            "Epoch 47/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.3863 - mae: 0.4092 - val_loss: 149.6392 - val_mae: 7.3996\n",
            "Epoch 48/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.4456 - mae: 0.4425 - val_loss: 148.8692 - val_mae: 7.3747\n",
            "Epoch 49/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.5337 - mae: 0.5071 - val_loss: 149.9541 - val_mae: 7.4466\n",
            "Epoch 50/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.5698 - mae: 0.5000 - val_loss: 148.2202 - val_mae: 7.3362\n",
            "Epoch 51/100\n",
            "35/35 [==============================] - 101s 3s/step - loss: 0.6636 - mae: 0.5559 - val_loss: 148.8493 - val_mae: 7.3349\n",
            "Epoch 52/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.5950 - mae: 0.5210 - val_loss: 149.8748 - val_mae: 7.4420\n",
            "Epoch 53/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 0.6212 - mae: 0.5333 - val_loss: 145.9510 - val_mae: 7.3525\n",
            "Epoch 54/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 0.8370 - mae: 0.6529 - val_loss: 148.3949 - val_mae: 7.4034\n",
            "Epoch 55/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 0.6913 - mae: 0.5332 - val_loss: 147.3361 - val_mae: 7.2151\n",
            "Epoch 56/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 1.9521 - mae: 0.9297 - val_loss: 148.9583 - val_mae: 7.3851\n",
            "Epoch 57/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 4.1701 - mae: 1.2149 - val_loss: 157.1556 - val_mae: 7.5659\n",
            "Epoch 58/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 4.0207 - mae: 1.0894 - val_loss: 148.5758 - val_mae: 7.2837\n",
            "Epoch 59/100\n",
            "35/35 [==============================] - 110s 3s/step - loss: 6.6450 - mae: 1.6429 - val_loss: 154.0000 - val_mae: 7.5521\n",
            "Epoch 60/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 4.0239 - mae: 1.3552 - val_loss: 154.3887 - val_mae: 7.5957\n",
            "Epoch 61/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 4.8778 - mae: 1.5622 - val_loss: 151.1158 - val_mae: 7.3000\n",
            "Epoch 62/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 5.2132 - mae: 1.6278 - val_loss: 147.9216 - val_mae: 7.2529\n",
            "Epoch 63/100\n",
            "35/35 [==============================] - 107s 3s/step - loss: 3.7773 - mae: 1.3117 - val_loss: 150.9323 - val_mae: 7.2365\n",
            "Epoch 64/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 2.5312 - mae: 1.1225 - val_loss: 148.4489 - val_mae: 7.1694\n",
            "Epoch 65/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 1.6831 - mae: 0.9194 - val_loss: 146.1113 - val_mae: 7.1126\n",
            "Epoch 66/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 1.5290 - mae: 0.8420 - val_loss: 150.5553 - val_mae: 7.3142\n",
            "Epoch 67/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 1.1247 - mae: 0.7211 - val_loss: 148.8094 - val_mae: 7.1605\n",
            "Epoch 68/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.6967 - mae: 0.5649 - val_loss: 150.5408 - val_mae: 7.2817\n",
            "Epoch 69/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 0.5997 - mae: 0.4938 - val_loss: 150.2080 - val_mae: 7.1760\n",
            "Epoch 70/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.4569 - mae: 0.3966 - val_loss: 149.5244 - val_mae: 7.2451\n",
            "Epoch 71/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 0.4167 - mae: 0.3702 - val_loss: 151.4893 - val_mae: 7.3303\n",
            "Epoch 72/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.4675 - mae: 0.4501 - val_loss: 151.1169 - val_mae: 7.3764\n",
            "Epoch 73/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.3827 - mae: 0.4010 - val_loss: 151.3918 - val_mae: 7.3189\n",
            "Epoch 74/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 0.4271 - mae: 0.3774 - val_loss: 152.9996 - val_mae: 7.3125\n",
            "Epoch 75/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 0.5557 - mae: 0.4776 - val_loss: 153.7674 - val_mae: 7.3571\n",
            "Epoch 76/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.4433 - mae: 0.3920 - val_loss: 150.7916 - val_mae: 7.3106\n",
            "Epoch 77/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.5076 - mae: 0.4102 - val_loss: 150.9786 - val_mae: 7.2503\n",
            "Epoch 78/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.5508 - mae: 0.4267 - val_loss: 152.7558 - val_mae: 7.3572\n",
            "Epoch 79/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.5711 - mae: 0.4296 - val_loss: 151.9576 - val_mae: 7.3187\n",
            "Epoch 80/100\n",
            "35/35 [==============================] - 113s 3s/step - loss: 0.6427 - mae: 0.4964 - val_loss: 153.1288 - val_mae: 7.3190\n",
            "Epoch 81/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.8110 - mae: 0.6342 - val_loss: 150.7722 - val_mae: 7.3083\n",
            "Epoch 82/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.7705 - mae: 0.6314 - val_loss: 154.6359 - val_mae: 7.3981\n",
            "Epoch 83/100\n",
            "35/35 [==============================] - 111s 3s/step - loss: 1.0268 - mae: 0.6211 - val_loss: 150.7205 - val_mae: 7.3051\n",
            "Epoch 84/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 1.1618 - mae: 0.7367 - val_loss: 151.1406 - val_mae: 7.2517\n",
            "Epoch 85/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 1.1168 - mae: 0.7206 - val_loss: 150.5311 - val_mae: 7.2935\n",
            "Epoch 86/100\n",
            "35/35 [==============================] - 105s 3s/step - loss: 0.9788 - mae: 0.6910 - val_loss: 151.1834 - val_mae: 7.3354\n",
            "Epoch 87/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 1.3473 - mae: 0.8216 - val_loss: 149.9964 - val_mae: 7.3500\n",
            "Epoch 88/100\n",
            "35/35 [==============================] - 104s 3s/step - loss: 1.1598 - mae: 0.7159 - val_loss: 149.9248 - val_mae: 7.1549\n",
            "Epoch 89/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 1.2483 - mae: 0.7293 - val_loss: 148.6648 - val_mae: 7.2767\n",
            "Epoch 90/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 1.7692 - mae: 0.8900 - val_loss: 147.4102 - val_mae: 7.2695\n",
            "Epoch 91/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 2.2284 - mae: 1.0051 - val_loss: 152.5982 - val_mae: 7.2405\n",
            "Epoch 92/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 2.1373 - mae: 0.9627 - val_loss: 153.3528 - val_mae: 7.6106\n",
            "Epoch 93/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 2.0337 - mae: 1.0182 - val_loss: 151.8066 - val_mae: 7.1948\n",
            "Epoch 94/100\n",
            "35/35 [==============================] - 101s 3s/step - loss: 1.8374 - mae: 0.9570 - val_loss: 151.6162 - val_mae: 7.4066\n",
            "Epoch 95/100\n",
            "35/35 [==============================] - 103s 3s/step - loss: 1.4259 - mae: 0.8320 - val_loss: 152.5756 - val_mae: 7.2516\n",
            "Epoch 96/100\n",
            "35/35 [==============================] - 106s 3s/step - loss: 1.6452 - mae: 0.8865 - val_loss: 152.7458 - val_mae: 7.2124\n",
            "Epoch 97/100\n",
            "35/35 [==============================] - 113s 3s/step - loss: 1.3621 - mae: 0.7809 - val_loss: 149.7850 - val_mae: 7.2948\n",
            "Epoch 98/100\n",
            "35/35 [==============================] - 108s 3s/step - loss: 1.3682 - mae: 0.8032 - val_loss: 154.1859 - val_mae: 7.2439\n",
            "Epoch 99/100\n",
            "35/35 [==============================] - 108s 3s/step - loss: 1.1909 - mae: 0.7050 - val_loss: 149.6139 - val_mae: 7.2160\n",
            "Epoch 100/100\n",
            "35/35 [==============================] - 118s 3s/step - loss: 1.1197 - mae: 0.6625 - val_loss: 151.0050 - val_mae: 7.2441\n",
            "Epoch 1/100\n",
            "35/35 [==============================] - 116s 3s/step - loss: 1.0590 - accuracy: 0.5857 - val_loss: 0.6680 - val_accuracy: 0.5875\n",
            "Epoch 2/100\n",
            "35/35 [==============================] - 122s 3s/step - loss: 0.6317 - accuracy: 0.6393 - val_loss: 0.6450 - val_accuracy: 0.6250\n",
            "Epoch 3/100\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.5325 - accuracy: 0.7491 - val_loss: 0.6652 - val_accuracy: 0.6167\n",
            "Epoch 4/100\n",
            "35/35 [==============================] - 153s 4s/step - loss: 0.3909 - accuracy: 0.8554 - val_loss: 0.6687 - val_accuracy: 0.6625\n",
            "Epoch 5/100\n",
            "35/35 [==============================] - 146s 4s/step - loss: 0.2319 - accuracy: 0.9161 - val_loss: 0.7328 - val_accuracy: 0.6958\n",
            "Epoch 6/100\n",
            "35/35 [==============================] - 140s 4s/step - loss: 0.1276 - accuracy: 0.9643 - val_loss: 0.8600 - val_accuracy: 0.6542\n",
            "Epoch 7/100\n",
            "35/35 [==============================] - 108s 3s/step - loss: 0.0495 - accuracy: 0.9929 - val_loss: 1.0763 - val_accuracy: 0.6583\n",
            "Epoch 8/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.0242 - accuracy: 0.9955 - val_loss: 1.2954 - val_accuracy: 0.6917\n",
            "Epoch 9/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0262 - accuracy: 0.9964 - val_loss: 1.1515 - val_accuracy: 0.6625\n",
            "Epoch 10/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0188 - accuracy: 0.9982 - val_loss: 1.1862 - val_accuracy: 0.6792\n",
            "Epoch 11/100\n",
            "35/35 [==============================] - 107s 3s/step - loss: 0.0068 - accuracy: 0.9982 - val_loss: 1.5271 - val_accuracy: 0.6625\n",
            "Epoch 12/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.0064 - accuracy: 0.9991 - val_loss: 1.5988 - val_accuracy: 0.6750\n",
            "Epoch 13/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0145 - accuracy: 0.9991 - val_loss: 1.6370 - val_accuracy: 0.6792\n",
            "Epoch 14/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0115 - accuracy: 0.9991 - val_loss: 1.4446 - val_accuracy: 0.6625\n",
            "Epoch 15/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0053 - accuracy: 0.9991 - val_loss: 1.7061 - val_accuracy: 0.6875\n",
            "Epoch 16/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0159 - accuracy: 0.9991 - val_loss: 1.4883 - val_accuracy: 0.6792\n",
            "Epoch 17/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.0063 - accuracy: 0.9991 - val_loss: 1.6972 - val_accuracy: 0.6833\n",
            "Epoch 18/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.0121 - accuracy: 0.9991 - val_loss: 1.3607 - val_accuracy: 0.6792\n",
            "Epoch 19/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0071 - accuracy: 0.9991 - val_loss: 1.5047 - val_accuracy: 0.6792\n",
            "Epoch 20/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0087 - accuracy: 0.9982 - val_loss: 1.5015 - val_accuracy: 0.6708\n",
            "Epoch 21/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.0033 - accuracy: 0.9991 - val_loss: 1.6396 - val_accuracy: 0.6583\n",
            "Epoch 22/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0032 - accuracy: 0.9991 - val_loss: 1.5560 - val_accuracy: 0.6833\n",
            "Epoch 23/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0042 - accuracy: 0.9991 - val_loss: 1.5999 - val_accuracy: 0.6750\n",
            "Epoch 24/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.0022 - accuracy: 0.9991 - val_loss: 1.6615 - val_accuracy: 0.6583\n",
            "Epoch 25/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0032 - accuracy: 0.9991 - val_loss: 1.5863 - val_accuracy: 0.6833\n",
            "Epoch 26/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0021 - accuracy: 0.9982 - val_loss: 1.6657 - val_accuracy: 0.6833\n",
            "Epoch 27/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0024 - accuracy: 0.9991 - val_loss: 1.6537 - val_accuracy: 0.6708\n",
            "Epoch 28/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0038 - accuracy: 0.9982 - val_loss: 1.6228 - val_accuracy: 0.6667\n",
            "Epoch 29/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0029 - accuracy: 0.9982 - val_loss: 1.6357 - val_accuracy: 0.6625\n",
            "Epoch 30/100\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.0022 - accuracy: 0.9991 - val_loss: 1.6553 - val_accuracy: 0.6708\n",
            "Epoch 31/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0032 - accuracy: 0.9982 - val_loss: 1.6838 - val_accuracy: 0.6708\n",
            "Epoch 32/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0022 - accuracy: 0.9991 - val_loss: 1.6536 - val_accuracy: 0.6583\n",
            "Epoch 33/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0028 - accuracy: 0.9982 - val_loss: 1.6516 - val_accuracy: 0.6708\n",
            "Epoch 34/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0037 - accuracy: 0.9991 - val_loss: 1.6599 - val_accuracy: 0.6792\n",
            "Epoch 35/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0021 - accuracy: 0.9982 - val_loss: 1.6930 - val_accuracy: 0.6667\n",
            "Epoch 36/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0024 - accuracy: 0.9982 - val_loss: 1.7067 - val_accuracy: 0.6667\n",
            "Epoch 37/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0024 - accuracy: 0.9982 - val_loss: 1.7287 - val_accuracy: 0.6625\n",
            "Epoch 38/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0024 - accuracy: 0.9991 - val_loss: 1.6536 - val_accuracy: 0.6708\n",
            "Epoch 39/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 1.7580 - val_accuracy: 0.6625\n",
            "Epoch 40/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0021 - accuracy: 0.9991 - val_loss: 1.7671 - val_accuracy: 0.6667\n",
            "Epoch 41/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0020 - accuracy: 0.9991 - val_loss: 1.7360 - val_accuracy: 0.6708\n",
            "Epoch 42/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0025 - accuracy: 0.9991 - val_loss: 1.7518 - val_accuracy: 0.6625\n",
            "Epoch 43/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 1.7848 - val_accuracy: 0.6708\n",
            "Epoch 44/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0021 - accuracy: 0.9982 - val_loss: 1.7889 - val_accuracy: 0.6625\n",
            "Epoch 45/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0018 - accuracy: 0.9982 - val_loss: 1.8173 - val_accuracy: 0.6625\n",
            "Epoch 46/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 1.8439 - val_accuracy: 0.6625\n",
            "Epoch 47/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.0026 - accuracy: 0.9982 - val_loss: 1.7399 - val_accuracy: 0.6750\n",
            "Epoch 48/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0029 - accuracy: 0.9982 - val_loss: 1.8367 - val_accuracy: 0.6667\n",
            "Epoch 49/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0031 - accuracy: 0.9991 - val_loss: 1.6851 - val_accuracy: 0.7042\n",
            "Epoch 50/100\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.0112 - accuracy: 0.9982 - val_loss: 1.6977 - val_accuracy: 0.6583\n",
            "Epoch 51/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0041 - accuracy: 0.9982 - val_loss: 1.9428 - val_accuracy: 0.6750\n",
            "Epoch 52/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0050 - accuracy: 0.9991 - val_loss: 1.6927 - val_accuracy: 0.6625\n",
            "Epoch 53/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0057 - accuracy: 0.9991 - val_loss: 1.6409 - val_accuracy: 0.6583\n",
            "Epoch 54/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0273 - accuracy: 0.9929 - val_loss: 1.3391 - val_accuracy: 0.6500\n",
            "Epoch 55/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.1929 - accuracy: 0.9312 - val_loss: 1.2577 - val_accuracy: 0.6333\n",
            "Epoch 56/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.1316 - accuracy: 0.9616 - val_loss: 1.3942 - val_accuracy: 0.7083\n",
            "Epoch 57/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.1251 - accuracy: 0.9509 - val_loss: 1.6538 - val_accuracy: 0.6750\n",
            "Epoch 58/100\n",
            "35/35 [==============================] - 92s 3s/step - loss: 0.0274 - accuracy: 0.9955 - val_loss: 1.9393 - val_accuracy: 0.6625\n",
            "Epoch 59/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0165 - accuracy: 0.9955 - val_loss: 2.2892 - val_accuracy: 0.6583\n",
            "Epoch 60/100\n",
            "35/35 [==============================] - 90s 3s/step - loss: 0.0146 - accuracy: 0.9973 - val_loss: 2.0134 - val_accuracy: 0.6500\n",
            "Epoch 61/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0044 - accuracy: 0.9982 - val_loss: 2.1986 - val_accuracy: 0.6667\n",
            "Epoch 62/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0027 - accuracy: 0.9982 - val_loss: 2.3033 - val_accuracy: 0.6750\n",
            "Epoch 63/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.0025 - accuracy: 0.9982 - val_loss: 2.2671 - val_accuracy: 0.6625\n",
            "Epoch 64/100\n",
            "35/35 [==============================] - 92s 3s/step - loss: 0.0029 - accuracy: 0.9982 - val_loss: 2.3011 - val_accuracy: 0.6792\n",
            "Epoch 65/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 2.3474 - val_accuracy: 0.6750\n",
            "Epoch 66/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0025 - accuracy: 0.9991 - val_loss: 2.3303 - val_accuracy: 0.6750\n",
            "Epoch 67/100\n",
            "35/35 [==============================] - 92s 3s/step - loss: 0.0029 - accuracy: 0.9991 - val_loss: 2.3214 - val_accuracy: 0.6792\n",
            "Epoch 68/100\n",
            "35/35 [==============================] - 93s 3s/step - loss: 0.0025 - accuracy: 0.9982 - val_loss: 2.3504 - val_accuracy: 0.6667\n",
            "Epoch 69/100\n",
            "35/35 [==============================] - 92s 3s/step - loss: 0.0017 - accuracy: 0.9982 - val_loss: 2.4128 - val_accuracy: 0.6792\n",
            "Epoch 70/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0023 - accuracy: 0.9991 - val_loss: 2.3834 - val_accuracy: 0.6708\n",
            "Epoch 71/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0033 - accuracy: 0.9982 - val_loss: 2.3797 - val_accuracy: 0.6750\n",
            "Epoch 72/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.4388 - val_accuracy: 0.6833\n",
            "Epoch 73/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.4483 - val_accuracy: 0.6833\n",
            "Epoch 74/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0024 - accuracy: 0.9991 - val_loss: 2.4779 - val_accuracy: 0.6792\n",
            "Epoch 75/100\n",
            "35/35 [==============================] - 93s 3s/step - loss: 0.0028 - accuracy: 0.9991 - val_loss: 2.4230 - val_accuracy: 0.6792\n",
            "Epoch 76/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 2.3791 - val_accuracy: 0.6792\n",
            "Epoch 77/100\n",
            "35/35 [==============================] - 101s 3s/step - loss: 0.0029 - accuracy: 0.9982 - val_loss: 2.4140 - val_accuracy: 0.6792\n",
            "Epoch 78/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0021 - accuracy: 0.9991 - val_loss: 2.5061 - val_accuracy: 0.6792\n",
            "Epoch 79/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0030 - accuracy: 0.9982 - val_loss: 2.4692 - val_accuracy: 0.6875\n",
            "Epoch 80/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0020 - accuracy: 0.9991 - val_loss: 2.4401 - val_accuracy: 0.6792\n",
            "Epoch 81/100\n",
            "35/35 [==============================] - 91s 3s/step - loss: 0.0017 - accuracy: 0.9991 - val_loss: 2.5353 - val_accuracy: 0.6833\n",
            "Epoch 82/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0021 - accuracy: 0.9982 - val_loss: 2.5241 - val_accuracy: 0.6833\n",
            "Epoch 83/100\n",
            "35/35 [==============================] - 100s 3s/step - loss: 0.0022 - accuracy: 0.9991 - val_loss: 2.5038 - val_accuracy: 0.6833\n",
            "Epoch 84/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0020 - accuracy: 0.9982 - val_loss: 2.5298 - val_accuracy: 0.6792\n",
            "Epoch 85/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0019 - accuracy: 0.9982 - val_loss: 2.5249 - val_accuracy: 0.6833\n",
            "Epoch 86/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0021 - accuracy: 0.9991 - val_loss: 2.5556 - val_accuracy: 0.6792\n",
            "Epoch 87/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0015 - accuracy: 0.9991 - val_loss: 2.5380 - val_accuracy: 0.6792\n",
            "Epoch 88/100\n",
            "35/35 [==============================] - 93s 3s/step - loss: 0.0015 - accuracy: 0.9991 - val_loss: 2.5894 - val_accuracy: 0.6833\n",
            "Epoch 89/100\n",
            "35/35 [==============================] - 107s 3s/step - loss: 0.0016 - accuracy: 0.9982 - val_loss: 2.6026 - val_accuracy: 0.6792\n",
            "Epoch 90/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.5869 - val_accuracy: 0.6792\n",
            "Epoch 91/100\n",
            "35/35 [==============================] - 94s 3s/step - loss: 0.0014 - accuracy: 0.9991 - val_loss: 2.6277 - val_accuracy: 0.6750\n",
            "Epoch 92/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0017 - accuracy: 0.9991 - val_loss: 2.6633 - val_accuracy: 0.6750\n",
            "Epoch 93/100\n",
            "35/35 [==============================] - 96s 3s/step - loss: 0.0016 - accuracy: 0.9991 - val_loss: 2.6188 - val_accuracy: 0.6750\n",
            "Epoch 94/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0019 - accuracy: 0.9991 - val_loss: 2.6001 - val_accuracy: 0.6750\n",
            "Epoch 95/100\n",
            "35/35 [==============================] - 102s 3s/step - loss: 0.0030 - accuracy: 0.9991 - val_loss: 2.5583 - val_accuracy: 0.6792\n",
            "Epoch 96/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0033 - accuracy: 0.9991 - val_loss: 2.4486 - val_accuracy: 0.6708\n",
            "Epoch 97/100\n",
            "35/35 [==============================] - 98s 3s/step - loss: 0.0013 - accuracy: 0.9991 - val_loss: 2.5211 - val_accuracy: 0.6750\n",
            "Epoch 98/100\n",
            "35/35 [==============================] - 97s 3s/step - loss: 0.0018 - accuracy: 0.9982 - val_loss: 2.5720 - val_accuracy: 0.6750\n",
            "Epoch 99/100\n",
            "35/35 [==============================] - 95s 3s/step - loss: 0.0018 - accuracy: 0.9991 - val_loss: 2.5999 - val_accuracy: 0.6750\n",
            "Epoch 100/100\n",
            "35/35 [==============================] - 99s 3s/step - loss: 0.0015 - accuracy: 0.9991 - val_loss: 2.6103 - val_accuracy: 0.6750\n",
            "8/8 [==============================] - 6s 615ms/step - loss: 79.9874 - mae: 5.7571\n",
            "Age Model Test MAE: 5.757080078125\n",
            "8/8 [==============================] - 6s 725ms/step - loss: 2.8009 - accuracy: 0.6417\n",
            "Gender Model Test Accuracy: 0.6416666507720947\n"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential, load_model, Model\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Input, BatchNormalization, Activation, Add, AveragePooling2D\n",
        "from tensorflow.keras.callbacks import ModelCheckpoint\n",
        "from tensorflow.keras.utils import to_categorical\n",
        "from pathlib import Path\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "\n",
        "# Mount Google Drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Function to extract age and gender from the filename\n",
        "def extract_label(filename):\n",
        "    try:\n",
        "        parts = filename.split('_')\n",
        "        age = int(parts[0])\n",
        "        gender = int(parts[1])  # Assuming 0 for male and 1 for female\n",
        "        return age, gender\n",
        "    except ValueError:\n",
        "        print(f\"Skipping file with unexpected filename format: {filename}\")\n",
        "        return None, None\n",
        "\n",
        "# Function to load images and labels from a given folder\n",
        "def load_images_from_folder(folder):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "\n",
        "    # Iterate over all files in the folder\n",
        "    for filename in os.listdir(folder):\n",
        "        # Construct the full file path\n",
        "        file_path = folder / filename\n",
        "        # Read the image file\n",
        "        img = cv2.imread(str(file_path))\n",
        "        if img is not None:\n",
        "            # Resize the image\n",
        "            img = cv2.resize(img, (224, 224))  # Resize images to 224x224\n",
        "            age, gender = extract_label(filename)\n",
        "            if age is not None and gender is not None:  # Only add images with valid labels\n",
        "                images.append(img)\n",
        "                age_labels.append(age)\n",
        "                gender_labels.append(gender)\n",
        "\n",
        "    # Convert lists to numpy arrays\n",
        "    images = np.array(images, dtype='float32') / 255.0  # Normalize images\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Define path to your dataset folder in Google Drive\n",
        "folder_path = Path('/content/drive/MyDrive/JGGH')\n",
        "\n",
        "# Load images and labels\n",
        "images, age_labels, gender_labels = load_images_from_folder(folder_path)\n",
        "\n",
        "# Split data for age and gender detection\n",
        "X_train_age, X_val_test_age, y_train_age, y_val_test_age = train_test_split(images, age_labels, test_size=0.3, random_state=42)\n",
        "X_val_age, X_test_age, y_val_age, y_test_age = train_test_split(X_val_test_age, y_val_test_age, test_size=0.5, random_state=42)\n",
        "\n",
        "X_train_gender, X_val_test_gender, y_train_gender, y_val_test_gender = train_test_split(images, gender_labels, test_size=0.3, random_state=42)\n",
        "X_val_gender, X_test_gender, y_val_gender, y_test_gender = train_test_split(X_val_test_gender, y_val_test_gender, test_size=0.5, random_state=42)\n",
        "\n",
        "# Define CNN model for age detection (regression)\n",
        "age_model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(1)  # Output layer with one neuron for regression\n",
        "])\n",
        "\n",
        "# Define CNN model for gender detection (binary classification)\n",
        "gender_model = Sequential([\n",
        "    Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Conv2D(64, (3, 3), activation='relu'),\n",
        "    MaxPooling2D(2, 2),\n",
        "    Flatten(),\n",
        "    Dense(128, activation='relu'),\n",
        "    Dense(1, activation='sigmoid')  # Output layer with one neuron for binary classification\n",
        "])\n",
        "\n",
        "# Compile the models\n",
        "age_model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "gender_model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "\n",
        "# Set up the checkpoint directory\n",
        "checkpoint_dir = '/content/drive/MyDrive/HGGK/MODEL2/checkpoints/'\n",
        "\n",
        "\n",
        "# Train the age model with checkpointing\n",
        "age_model.fit(\n",
        "    X_train_age, y_train_age,\n",
        "    validation_data=(X_val_age, y_val_age),\n",
        "    epochs=100,\n",
        "    callbacks=[age_checkpoint_callback]  # Add the checkpoint callback here\n",
        ")\n",
        "\n",
        "# Train the gender model with checkpointing\n",
        "gender_model.fit(\n",
        "    X_train_gender, y_train_gender,\n",
        "    validation_data=(X_val_gender, y_val_gender),\n",
        "    epochs=100,\n",
        "    callbacks=[gender_checkpoint_callback]  # Add the checkpoint callback here\n",
        ")\n",
        "\n",
        "# Evaluate the age model (optional)\n",
        "age_test_loss, age_test_mae = age_model.evaluate(X_test_age, y_test_age)\n",
        "print('Age Model Test MAE:', age_test_mae)\n",
        "\n",
        "# Evaluate the gender model (optional)\n",
        "gender_test_loss, gender_test_acc = gender_model.evaluate(X_test_gender, y_test_gender)\n",
        "print('Gender Model Test Accuracy:', gender_test_acc)\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**6. Sample input image testing for CNN with Higher images**"
      ],
      "metadata": {
        "id": "bhFboPiM2fcE"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "ZF5gUaymPGaA",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "a5f5158c-5b01-42a4-863e-cc146f7d65ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1/1 [==============================] - 0s 139ms/step\n",
            "Predicted Age: 21.97981071472168\n",
            "1/1 [==============================] - 0s 158ms/step\n",
            "Predicted Gender: Female\n",
            "1/1 [==============================] - 0s 406ms/step\n",
            "Predicted Emotion: Surprise\n"
          ]
        }
      ],
      "source": [
        "from tensorflow.keras.models import load_model\n",
        "import cv2\n",
        "import numpy as np\n",
        "\n",
        "# Paths to your saved models\n",
        "age_model_path = '/content/drive/MyDrive/2000/age2000_model.h5'\n",
        "gender_model_path = '/content/drive/MyDrive/2000/gender2000_model.h5'\n",
        "emotion_model_path = '/content/drive/MyDrive/emotion_little_vgg_2.h5'  # Update with the correct path\n",
        "\n",
        "# Load the models\n",
        "age_model = load_model(age_model_path)\n",
        "gender_model = load_model(gender_model_path)\n",
        "emotion_model = load_model(emotion_model_path)  # Load the emotion classifier model\n",
        "\n",
        "def preprocess_image(image_path, size=(224, 224), color_mode='rgb'):\n",
        "    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE if color_mode == 'grayscale' else cv2.IMREAD_COLOR)\n",
        "    if img is None:\n",
        "        print(f\"Failed to load image: {image_path}\")\n",
        "        return None\n",
        "    img = cv2.resize(img, size)\n",
        "    img = img / 255.0\n",
        "    if color_mode == 'grayscale':\n",
        "        img = np.expand_dims(img, axis=-1)  # Add channel dimension for grayscale\n",
        "    return img.reshape(1, *size, img.shape[-1])\n",
        "\n",
        "# Example usage\n",
        "test_image_path = '/content/drive/MyDrive/2000/22_1_2_20170116172719532.jpg'\n",
        "processed_image = preprocess_image(test_image_path)  # For age and gender\n",
        "emotion_image = preprocess_image(test_image_path, size=(48, 48), color_mode='grayscale')  # For emotion\n",
        "\n",
        "# Predict age\n",
        "predicted_age = age_model.predict(processed_image)\n",
        "print(f\"Predicted Age: {predicted_age[0][0]}\")\n",
        "\n",
        "# Predict gender\n",
        "predicted_gender_prob = gender_model.predict(processed_image)\n",
        "predicted_gender = \"Male\" if predicted_gender_prob[0][0] < 0.5 else \"Female\"\n",
        "print(f\"Predicted Gender: {predicted_gender}\")\n",
        "\n",
        "# Predict emotion\n",
        "predicted_emotion_prob = emotion_model.predict(emotion_image)\n",
        "predicted_emotion = np.argmax(predicted_emotion_prob, axis=1)\n",
        "emotion_labels = ['Happy', 'Sad', 'Angry', 'Surprise', 'Fear' , 'Neutral']  # Update with your actual labels\n",
        "predicted_emotion_label = emotion_labels[predicted_emotion[0]]\n",
        "print(f\"Predicted Emotion: {predicted_emotion_label}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a2vGQRTAK2fh"
      },
      "source": [
        "**7. CNN model with higher image and graph**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "QY8aMNhKPGGR",
        "outputId": "a04c0aa1-f54e-443c-e0e8-a72472b6ed2a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "Epoch 1/75\n",
            "35/35 [==============================] - 135s 4s/step - loss: 290.4409 - mae: 10.9248 - val_loss: 126.6433 - val_mae: 7.0423\n",
            "Epoch 2/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 145.2364 - mae: 7.0389 - val_loss: 123.9072 - val_mae: 6.2079\n",
            "Epoch 3/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 131.1979 - mae: 6.1923 - val_loss: 122.4025 - val_mae: 6.0857\n",
            "Epoch 4/75\n",
            "35/35 [==============================] - 133s 4s/step - loss: 132.9794 - mae: 6.4823 - val_loss: 122.7896 - val_mae: 6.7916\n",
            "Epoch 5/75\n",
            "35/35 [==============================] - 121s 3s/step - loss: 118.5445 - mae: 5.6178 - val_loss: 106.0595 - val_mae: 5.1641\n",
            "Epoch 6/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 130.4031 - mae: 6.2206 - val_loss: 106.6555 - val_mae: 5.5482\n",
            "Epoch 7/75\n",
            "35/35 [==============================] - 124s 4s/step - loss: 123.1856 - mae: 5.9785 - val_loss: 106.6759 - val_mae: 5.5370\n",
            "Epoch 8/75\n",
            "35/35 [==============================] - 116s 3s/step - loss: 118.4599 - mae: 5.8644 - val_loss: 117.7599 - val_mae: 5.8484\n",
            "Epoch 9/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 123.0476 - mae: 6.1577 - val_loss: 105.6725 - val_mae: 5.5249\n",
            "Epoch 10/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 117.9300 - mae: 5.8425 - val_loss: 109.8822 - val_mae: 5.3806\n",
            "Epoch 11/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 122.7670 - mae: 5.9159 - val_loss: 104.8547 - val_mae: 5.3697\n",
            "Epoch 12/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 115.5313 - mae: 5.4095 - val_loss: 110.2462 - val_mae: 6.1418\n",
            "Epoch 13/75\n",
            "35/35 [==============================] - 116s 3s/step - loss: 124.9080 - mae: 6.0828 - val_loss: 109.0465 - val_mae: 5.3639\n",
            "Epoch 14/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 112.3357 - mae: 5.2768 - val_loss: 103.2315 - val_mae: 5.0917\n",
            "Epoch 15/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 114.3763 - mae: 5.4571 - val_loss: 101.9677 - val_mae: 5.1057\n",
            "Epoch 16/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 111.8966 - mae: 5.4051 - val_loss: 109.1452 - val_mae: 5.4051\n",
            "Epoch 17/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 112.9595 - mae: 5.3160 - val_loss: 105.0174 - val_mae: 5.6620\n",
            "Epoch 18/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 113.7264 - mae: 5.4253 - val_loss: 103.3871 - val_mae: 5.1546\n",
            "Epoch 19/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 111.8315 - mae: 5.3369 - val_loss: 104.3128 - val_mae: 5.5834\n",
            "Epoch 20/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 112.0280 - mae: 5.3248 - val_loss: 100.7893 - val_mae: 5.1529\n",
            "Epoch 21/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 111.9402 - mae: 5.4601 - val_loss: 104.3783 - val_mae: 5.2452\n",
            "Epoch 22/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 113.2743 - mae: 5.4744 - val_loss: 116.1990 - val_mae: 5.9095\n",
            "Epoch 23/75\n",
            "35/35 [==============================] - 126s 4s/step - loss: 116.5691 - mae: 5.7920 - val_loss: 102.3656 - val_mae: 5.1700\n",
            "Epoch 24/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 116.8595 - mae: 5.6817 - val_loss: 104.1172 - val_mae: 5.5009\n",
            "Epoch 25/75\n",
            "35/35 [==============================] - 137s 4s/step - loss: 110.0109 - mae: 5.2863 - val_loss: 107.4354 - val_mae: 5.4078\n",
            "Epoch 26/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 115.7537 - mae: 5.7059 - val_loss: 105.2094 - val_mae: 5.6607\n",
            "Epoch 27/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 111.5034 - mae: 5.3629 - val_loss: 105.1511 - val_mae: 5.3307\n",
            "Epoch 28/75\n",
            "35/35 [==============================] - 132s 4s/step - loss: 109.0942 - mae: 5.4240 - val_loss: 102.7513 - val_mae: 5.1680\n",
            "Epoch 29/75\n",
            "35/35 [==============================] - 138s 4s/step - loss: 107.1441 - mae: 5.2550 - val_loss: 102.8464 - val_mae: 5.2697\n",
            "Epoch 30/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 110.7140 - mae: 5.4421 - val_loss: 103.8092 - val_mae: 5.3984\n",
            "Epoch 31/75\n",
            "35/35 [==============================] - 116s 3s/step - loss: 112.4672 - mae: 5.6425 - val_loss: 111.3784 - val_mae: 6.2605\n",
            "Epoch 32/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 113.2058 - mae: 5.7316 - val_loss: 101.2214 - val_mae: 5.0737\n",
            "Epoch 33/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 110.5789 - mae: 5.3044 - val_loss: 103.9966 - val_mae: 5.1882\n",
            "Epoch 34/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 108.1566 - mae: 5.3214 - val_loss: 121.9296 - val_mae: 6.9846\n",
            "Epoch 35/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 111.3010 - mae: 5.7554 - val_loss: 102.6652 - val_mae: 5.3852\n",
            "Epoch 36/75\n",
            "35/35 [==============================] - 126s 4s/step - loss: 108.5786 - mae: 5.2877 - val_loss: 103.2708 - val_mae: 5.3216\n",
            "Epoch 37/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 107.8029 - mae: 5.2635 - val_loss: 102.7872 - val_mae: 5.3123\n",
            "Epoch 38/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 107.5006 - mae: 5.3418 - val_loss: 102.7373 - val_mae: 5.4031\n",
            "Epoch 39/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 106.8153 - mae: 5.3587 - val_loss: 101.8499 - val_mae: 5.3508\n",
            "Epoch 40/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 107.4649 - mae: 5.4885 - val_loss: 105.2821 - val_mae: 5.5707\n",
            "Epoch 41/75\n",
            "35/35 [==============================] - 121s 3s/step - loss: 109.7139 - mae: 5.4047 - val_loss: 102.7705 - val_mae: 5.4468\n",
            "Epoch 42/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 107.4145 - mae: 5.4360 - val_loss: 103.9878 - val_mae: 5.3433\n",
            "Epoch 43/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 107.7498 - mae: 5.2840 - val_loss: 102.5566 - val_mae: 5.3865\n",
            "Epoch 44/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 105.6570 - mae: 5.4408 - val_loss: 104.6060 - val_mae: 5.6975\n",
            "Epoch 45/75\n",
            "35/35 [==============================] - 126s 4s/step - loss: 108.0745 - mae: 5.4803 - val_loss: 107.8280 - val_mae: 5.9790\n",
            "Epoch 46/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 110.5092 - mae: 5.5161 - val_loss: 101.5388 - val_mae: 5.2426\n",
            "Epoch 47/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 107.2082 - mae: 5.2702 - val_loss: 107.2375 - val_mae: 5.5260\n",
            "Epoch 48/75\n",
            "35/35 [==============================] - 131s 4s/step - loss: 107.1564 - mae: 5.3203 - val_loss: 106.0070 - val_mae: 5.9257\n",
            "Epoch 49/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 106.4612 - mae: 5.4989 - val_loss: 104.5627 - val_mae: 5.4462\n",
            "Epoch 50/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 111.5847 - mae: 5.6348 - val_loss: 114.5661 - val_mae: 6.0774\n",
            "Epoch 51/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 113.5365 - mae: 5.7930 - val_loss: 113.7637 - val_mae: 6.0951\n",
            "Epoch 52/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 109.1264 - mae: 5.4800 - val_loss: 103.4700 - val_mae: 5.2300\n",
            "Epoch 53/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 111.6548 - mae: 5.6542 - val_loss: 119.1786 - val_mae: 6.2763\n",
            "Epoch 54/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 107.8495 - mae: 5.3450 - val_loss: 105.8748 - val_mae: 5.7155\n",
            "Epoch 55/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 106.9604 - mae: 5.5156 - val_loss: 105.3206 - val_mae: 5.3174\n",
            "Epoch 56/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 111.0207 - mae: 5.4772 - val_loss: 103.0693 - val_mae: 5.1419\n",
            "Epoch 57/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 108.2028 - mae: 5.4999 - val_loss: 111.0143 - val_mae: 5.5829\n",
            "Epoch 58/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 108.1479 - mae: 5.4222 - val_loss: 116.8004 - val_mae: 6.4577\n",
            "Epoch 59/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 112.4001 - mae: 5.5945 - val_loss: 103.7565 - val_mae: 5.5471\n",
            "Epoch 60/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 105.7457 - mae: 5.3749 - val_loss: 108.9788 - val_mae: 6.0734\n",
            "Epoch 61/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 107.0329 - mae: 5.3235 - val_loss: 101.5200 - val_mae: 5.2759\n",
            "Epoch 62/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 104.0615 - mae: 5.3881 - val_loss: 108.7525 - val_mae: 5.7355\n",
            "Epoch 63/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 105.0965 - mae: 5.5191 - val_loss: 105.1349 - val_mae: 5.3294\n",
            "Epoch 64/75\n",
            "35/35 [==============================] - 133s 4s/step - loss: 102.2642 - mae: 5.2342 - val_loss: 109.5140 - val_mae: 5.9683\n",
            "Epoch 65/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 103.0285 - mae: 5.4649 - val_loss: 114.3240 - val_mae: 6.1776\n",
            "Epoch 66/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 104.6569 - mae: 5.4967 - val_loss: 108.3155 - val_mae: 5.4481\n",
            "Epoch 67/75\n",
            "35/35 [==============================] - 122s 3s/step - loss: 101.7168 - mae: 5.3531 - val_loss: 122.2199 - val_mae: 6.8207\n",
            "Epoch 68/75\n",
            "35/35 [==============================] - 133s 4s/step - loss: 104.4793 - mae: 5.4377 - val_loss: 107.9486 - val_mae: 5.6736\n",
            "Epoch 69/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 104.6414 - mae: 5.5501 - val_loss: 134.6856 - val_mae: 7.4995\n",
            "Epoch 70/75\n",
            "35/35 [==============================] - 126s 4s/step - loss: 104.6957 - mae: 5.6615 - val_loss: 109.7020 - val_mae: 5.5071\n",
            "Epoch 71/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 104.1499 - mae: 5.2914 - val_loss: 123.9593 - val_mae: 6.6431\n",
            "Epoch 72/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 103.2190 - mae: 5.4566 - val_loss: 115.3727 - val_mae: 5.8165\n",
            "Epoch 73/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 99.2675 - mae: 5.4514 - val_loss: 132.8992 - val_mae: 5.7405\n",
            "Epoch 74/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 109.4510 - mae: 5.4519 - val_loss: 103.5849 - val_mae: 5.6333\n",
            "Epoch 75/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 108.6068 - mae: 5.6145 - val_loss: 109.0154 - val_mae: 5.6430\n",
            "Epoch 1/75\n",
            "35/35 [==============================] - 133s 4s/step - loss: 1.2013 - accuracy: 0.5616 - val_loss: 0.6922 - val_accuracy: 0.5458\n",
            "Epoch 2/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.6551 - accuracy: 0.6027 - val_loss: 0.6763 - val_accuracy: 0.5458\n",
            "Epoch 3/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 0.6460 - accuracy: 0.6134 - val_loss: 0.6826 - val_accuracy: 0.5562\n",
            "Epoch 4/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.6438 - accuracy: 0.6214 - val_loss: 0.7003 - val_accuracy: 0.5604\n",
            "Epoch 5/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 0.6362 - accuracy: 0.6330 - val_loss: 0.6497 - val_accuracy: 0.6417\n",
            "Epoch 6/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.6353 - accuracy: 0.6393 - val_loss: 0.7654 - val_accuracy: 0.5625\n",
            "Epoch 7/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 0.6600 - accuracy: 0.6223 - val_loss: 0.6644 - val_accuracy: 0.6313\n",
            "Epoch 8/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 0.6375 - accuracy: 0.6455 - val_loss: 0.6459 - val_accuracy: 0.6313\n",
            "Epoch 9/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.6184 - accuracy: 0.6562 - val_loss: 0.6427 - val_accuracy: 0.6458\n",
            "Epoch 10/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 0.6437 - accuracy: 0.6277 - val_loss: 0.6448 - val_accuracy: 0.6458\n",
            "Epoch 11/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 0.6204 - accuracy: 0.6536 - val_loss: 0.6340 - val_accuracy: 0.6625\n",
            "Epoch 12/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 0.6165 - accuracy: 0.6679 - val_loss: 0.6332 - val_accuracy: 0.6542\n",
            "Epoch 13/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 0.6154 - accuracy: 0.6661 - val_loss: 0.6332 - val_accuracy: 0.6521\n",
            "Epoch 14/75\n",
            "35/35 [==============================] - 129s 4s/step - loss: 0.6030 - accuracy: 0.6554 - val_loss: 0.6379 - val_accuracy: 0.6083\n",
            "Epoch 15/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.6128 - accuracy: 0.6661 - val_loss: 0.6162 - val_accuracy: 0.6542\n",
            "Epoch 16/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 0.6135 - accuracy: 0.6518 - val_loss: 0.6235 - val_accuracy: 0.6583\n",
            "Epoch 17/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.6069 - accuracy: 0.6652 - val_loss: 0.6087 - val_accuracy: 0.6771\n",
            "Epoch 18/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.6074 - accuracy: 0.6804 - val_loss: 0.6205 - val_accuracy: 0.6333\n",
            "Epoch 19/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.5939 - accuracy: 0.6768 - val_loss: 0.6104 - val_accuracy: 0.6625\n",
            "Epoch 20/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.5999 - accuracy: 0.6759 - val_loss: 0.6269 - val_accuracy: 0.6687\n",
            "Epoch 21/75\n",
            "35/35 [==============================] - 121s 3s/step - loss: 0.5809 - accuracy: 0.7018 - val_loss: 0.5862 - val_accuracy: 0.7104\n",
            "Epoch 22/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.5913 - accuracy: 0.6687 - val_loss: 0.5884 - val_accuracy: 0.6812\n",
            "Epoch 23/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.5743 - accuracy: 0.6973 - val_loss: 0.5796 - val_accuracy: 0.7021\n",
            "Epoch 24/75\n",
            "35/35 [==============================] - 131s 4s/step - loss: 0.5666 - accuracy: 0.6955 - val_loss: 0.5673 - val_accuracy: 0.6917\n",
            "Epoch 25/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 0.5653 - accuracy: 0.7107 - val_loss: 0.5902 - val_accuracy: 0.6604\n",
            "Epoch 26/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 0.5498 - accuracy: 0.7089 - val_loss: 0.5876 - val_accuracy: 0.6938\n",
            "Epoch 27/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.5413 - accuracy: 0.7232 - val_loss: 0.5670 - val_accuracy: 0.7063\n",
            "Epoch 28/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.5648 - accuracy: 0.7027 - val_loss: 0.5943 - val_accuracy: 0.6771\n",
            "Epoch 29/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 0.5434 - accuracy: 0.7071 - val_loss: 0.5998 - val_accuracy: 0.6833\n",
            "Epoch 30/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.5443 - accuracy: 0.7116 - val_loss: 0.5480 - val_accuracy: 0.6875\n",
            "Epoch 31/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.5462 - accuracy: 0.7143 - val_loss: 0.5631 - val_accuracy: 0.6792\n",
            "Epoch 32/75\n",
            "35/35 [==============================] - 117s 3s/step - loss: 0.5379 - accuracy: 0.7161 - val_loss: 0.5637 - val_accuracy: 0.6958\n",
            "Epoch 33/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.5509 - accuracy: 0.7036 - val_loss: 0.5669 - val_accuracy: 0.6979\n",
            "Epoch 34/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.5660 - accuracy: 0.7161 - val_loss: 0.5724 - val_accuracy: 0.6896\n",
            "Epoch 35/75\n",
            "35/35 [==============================] - 126s 4s/step - loss: 0.5242 - accuracy: 0.7232 - val_loss: 0.5237 - val_accuracy: 0.7208\n",
            "Epoch 36/75\n",
            "35/35 [==============================] - 118s 3s/step - loss: 0.5315 - accuracy: 0.7161 - val_loss: 0.5831 - val_accuracy: 0.6646\n",
            "Epoch 37/75\n",
            "35/35 [==============================] - 116s 3s/step - loss: 0.5272 - accuracy: 0.7348 - val_loss: 0.5656 - val_accuracy: 0.6854\n",
            "Epoch 38/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.5452 - accuracy: 0.7214 - val_loss: 0.5475 - val_accuracy: 0.6979\n",
            "Epoch 39/75\n",
            "35/35 [==============================] - 125s 4s/step - loss: 0.5173 - accuracy: 0.7554 - val_loss: 0.5899 - val_accuracy: 0.6938\n",
            "Epoch 40/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.5251 - accuracy: 0.7205 - val_loss: 0.5418 - val_accuracy: 0.7104\n",
            "Epoch 41/75\n",
            "35/35 [==============================] - 116s 3s/step - loss: 0.5013 - accuracy: 0.7509 - val_loss: 0.5458 - val_accuracy: 0.7000\n",
            "Epoch 42/75\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.5084 - accuracy: 0.7536 - val_loss: 0.5604 - val_accuracy: 0.6958\n",
            "Epoch 43/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.5055 - accuracy: 0.7491 - val_loss: 0.5367 - val_accuracy: 0.7333\n",
            "Epoch 44/75\n",
            "35/35 [==============================] - 130s 4s/step - loss: 0.5160 - accuracy: 0.7375 - val_loss: 0.5720 - val_accuracy: 0.6917\n",
            "Epoch 45/75\n",
            "35/35 [==============================] - 112s 3s/step - loss: 0.5019 - accuracy: 0.7580 - val_loss: 0.5541 - val_accuracy: 0.7208\n",
            "Epoch 46/75\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.5020 - accuracy: 0.7571 - val_loss: 0.5772 - val_accuracy: 0.7188\n",
            "Epoch 47/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.5209 - accuracy: 0.7304 - val_loss: 0.5882 - val_accuracy: 0.7000\n",
            "Epoch 48/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.5034 - accuracy: 0.7527 - val_loss: 0.5715 - val_accuracy: 0.7125\n",
            "Epoch 49/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.4880 - accuracy: 0.7571 - val_loss: 0.5311 - val_accuracy: 0.7312\n",
            "Epoch 50/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.5217 - accuracy: 0.7375 - val_loss: 0.5434 - val_accuracy: 0.7167\n",
            "Epoch 51/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.5060 - accuracy: 0.7348 - val_loss: 0.5521 - val_accuracy: 0.7208\n",
            "Epoch 52/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.5144 - accuracy: 0.7339 - val_loss: 0.5350 - val_accuracy: 0.7188\n",
            "Epoch 53/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4868 - accuracy: 0.7652 - val_loss: 0.5244 - val_accuracy: 0.7437\n",
            "Epoch 54/75\n",
            "35/35 [==============================] - 128s 4s/step - loss: 0.4992 - accuracy: 0.7429 - val_loss: 0.5625 - val_accuracy: 0.7271\n",
            "Epoch 55/75\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.4836 - accuracy: 0.7518 - val_loss: 0.5340 - val_accuracy: 0.7333\n",
            "Epoch 56/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.4906 - accuracy: 0.7607 - val_loss: 0.5717 - val_accuracy: 0.7083\n",
            "Epoch 57/75\n",
            "35/35 [==============================] - 113s 3s/step - loss: 0.4812 - accuracy: 0.7652 - val_loss: 0.5401 - val_accuracy: 0.7354\n",
            "Epoch 58/75\n",
            "35/35 [==============================] - 127s 4s/step - loss: 0.4746 - accuracy: 0.7732 - val_loss: 0.5701 - val_accuracy: 0.7250\n",
            "Epoch 59/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4842 - accuracy: 0.7661 - val_loss: 0.5471 - val_accuracy: 0.7292\n",
            "Epoch 60/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.5087 - accuracy: 0.7518 - val_loss: 0.5630 - val_accuracy: 0.7208\n",
            "Epoch 61/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4792 - accuracy: 0.7616 - val_loss: 0.5689 - val_accuracy: 0.7104\n",
            "Epoch 62/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.4696 - accuracy: 0.7768 - val_loss: 0.5512 - val_accuracy: 0.7229\n",
            "Epoch 63/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4641 - accuracy: 0.7750 - val_loss: 0.5374 - val_accuracy: 0.7375\n",
            "Epoch 64/75\n",
            "35/35 [==============================] - 121s 3s/step - loss: 0.4837 - accuracy: 0.7482 - val_loss: 0.5803 - val_accuracy: 0.7188\n",
            "Epoch 65/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.4598 - accuracy: 0.7679 - val_loss: 0.5828 - val_accuracy: 0.7167\n",
            "Epoch 66/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.4724 - accuracy: 0.7554 - val_loss: 0.5840 - val_accuracy: 0.7250\n",
            "Epoch 67/75\n",
            "35/35 [==============================] - 110s 3s/step - loss: 0.4509 - accuracy: 0.7875 - val_loss: 0.5704 - val_accuracy: 0.7188\n",
            "Epoch 68/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4829 - accuracy: 0.7598 - val_loss: 0.5785 - val_accuracy: 0.7229\n",
            "Epoch 69/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.4505 - accuracy: 0.7812 - val_loss: 0.5497 - val_accuracy: 0.7437\n",
            "Epoch 70/75\n",
            "35/35 [==============================] - 109s 3s/step - loss: 0.4603 - accuracy: 0.7714 - val_loss: 0.6491 - val_accuracy: 0.7146\n",
            "Epoch 71/75\n",
            "35/35 [==============================] - 119s 3s/step - loss: 0.4530 - accuracy: 0.7661 - val_loss: 0.5596 - val_accuracy: 0.7354\n",
            "Epoch 72/75\n",
            "35/35 [==============================] - 111s 3s/step - loss: 0.4527 - accuracy: 0.7929 - val_loss: 0.5386 - val_accuracy: 0.7292\n",
            "Epoch 73/75\n",
            "35/35 [==============================] - 113s 3s/step - loss: 0.4457 - accuracy: 0.7875 - val_loss: 0.5611 - val_accuracy: 0.7396\n",
            "Epoch 74/75\n",
            "35/35 [==============================] - 120s 3s/step - loss: 0.4383 - accuracy: 0.7795 - val_loss: 0.5649 - val_accuracy: 0.7312\n",
            "Epoch 75/75\n",
            "35/35 [==============================] - 112s 3s/step - loss: 0.4258 - accuracy: 0.7929 - val_loss: 0.6211 - val_accuracy: 0.7354\n",
            "15/15 [==============================] - 9s 633ms/step - loss: 109.0154 - mae: 5.6430\n",
            "Age Model Test MAE: 5.642977237701416\n",
            "15/15 [==============================] - 9s 576ms/step - loss: 0.6211 - accuracy: 0.7354\n",
            "Gender Model Test Accuracy: 0.7354166507720947\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/keras/src/engine/training.py:3079: UserWarning: You are saving your model as an HDF5 file via `model.save()`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')`.\n",
            "  saving_api.save_model(\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Models have been saved to Drive.\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from sklearn.model_selection import train_test_split\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "import matplotlib.pyplot as plt\n",
        "from pathlib import Path\n",
        "\n",
        "# Mount Google Drive (if using Google Colab)\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Function to extract age and gender from file names\n",
        "def extract_label(filename):\n",
        "    parts = filename.split('_')\n",
        "    age = int(parts[0])\n",
        "    gender = int(parts[1])\n",
        "    return age, gender\n",
        "\n",
        "# Function to load images and labels from the dataset\n",
        "def load_images_from_folder(folder):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "    for filename in os.listdir(folder):\n",
        "        img = cv2.imread(os.path.join(folder, filename))\n",
        "        if img is not None:\n",
        "            img = cv2.resize(img, (224, 224))\n",
        "            age, gender = extract_label(filename)\n",
        "            images.append(img)\n",
        "            age_labels.append(age)\n",
        "            gender_labels.append(gender)\n",
        "    images = np.array(images, dtype='float32') / 255.0\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Set the path to your dataset\n",
        "folder_path = Path('/content/drive/MyDrive/2000')  # Update this path\n",
        "images, age_labels, gender_labels = load_images_from_folder(folder_path)\n",
        "\n",
        "# Splitting the data into training and test sets\n",
        "X_train, X_test, y_train_age, y_test_age = train_test_split(images, age_labels, test_size=0.3, random_state=42)\n",
        "_, _, y_train_gender, y_test_gender = train_test_split(images, gender_labels, test_size=0.3, random_state=42)\n",
        "\n",
        "# Data augmentation settings\n",
        "datagen = ImageDataGenerator(\n",
        "    rotation_range=20,\n",
        "    width_shift_range=0.2,\n",
        "    height_shift_range=0.2,\n",
        "    shear_range=0.2,\n",
        "    zoom_range=0.2,\n",
        "    horizontal_flip=True,\n",
        "    fill_mode='nearest'\n",
        ")\n",
        "\n",
        "# Building CNN models\n",
        "def build_age_model():\n",
        "    model = Sequential([\n",
        "        Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Conv2D(64, (3, 3), activation='relu'),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Flatten(),\n",
        "        Dense(128, activation='relu'),\n",
        "        Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mae'])\n",
        "    return model\n",
        "\n",
        "def build_gender_model():\n",
        "    model = Sequential([\n",
        "        Conv2D(32, (3, 3), activation='relu', input_shape=(224, 224, 3)),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Conv2D(64, (3, 3), activation='relu'),\n",
        "        MaxPooling2D(2, 2),\n",
        "        Flatten(),\n",
        "        Dense(128, activation='relu'),\n",
        "        Dense(1, activation='sigmoid')\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n",
        "    return model\n",
        "\n",
        "# Create model instances\n",
        "age_model = build_age_model()\n",
        "gender_model = build_gender_model()\n",
        "\n",
        "# Training the models with data augmentation\n",
        "age_history = age_model.fit(datagen.flow(X_train, y_train_age, batch_size=32), validation_data=(X_test, y_test_age), epochs=75)\n",
        "gender_history = gender_model.fit(datagen.flow(X_train, y_train_gender, batch_size=32), validation_data=(X_test, y_test_gender), epochs=75)\n",
        "\n",
        "# Evaluating the models\n",
        "age_test_loss, age_test_mae = age_model.evaluate(X_test, y_test_age)\n",
        "print('Age Model Test MAE:', age_test_mae)\n",
        "gender_test_loss, gender_test_acc = gender_model.evaluate(X_test, y_test_gender)\n",
        "print('Gender Model Test Accuracy:', gender_test_acc)\n",
        "\n",
        "age_model.save('/content/drive/MyDrive/2000/age2000_model.h5')  # Saves the age model\n",
        "gender_model.save('/content/drive/MyDrive/2000/gender2000_model.h5')  # Saves the gender model\n",
        "print(\"Models have been saved to Drive.\")\n",
        "\n",
        "# Plotting the training and validation loss for the age model\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(age_history.history['loss'], label='Training Loss')\n",
        "plt.plot(age_history.history['val_loss'], label='Validation Loss')\n",
        "plt.title('Age Model Loss')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Loss')\n",
        "plt.legend()\n",
        "\n",
        "# Plotting the training and validation accuracy for the gender model\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(gender_history.history['accuracy'], label='Training Accuracy')\n",
        "plt.plot(gender_history.history['val_accuracy'], label='Validation Accuracy')\n",
        "plt.title('Gender Model Accuracy')\n",
        "plt.xlabel('Epochs')\n",
        "plt.ylabel('Accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7.evalution metrices for CNN higher images for testing**"
      ],
      "metadata": {
        "id": "Bd0FffZL3L_L"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "vNE6ElOIPF8F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "outputId": "0a38dc25-7b8d-4942-ff50-068d613179d0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "50/50 [==============================] - 43s 866ms/step\n",
            "50/50 [==============================] - 41s 824ms/step\n",
            "Mean Absolute Error for Age Model: 5.55880540728569\n",
            "Accuracy for Gender Model: 0.820625\n",
            "Classification Report for Gender Model:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "        Male       0.84      0.70      0.76       663\n",
            "      Female       0.81      0.91      0.86       937\n",
            "\n",
            "    accuracy                           0.82      1600\n",
            "   macro avg       0.83      0.80      0.81      1600\n",
            "weighted avg       0.82      0.82      0.82      1600\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "from tensorflow.keras.models import load_model\n",
        "from sklearn.metrics import mean_absolute_error, classification_report, accuracy_score\n",
        "\n",
        "# Function to load images and labels for testing\n",
        "def load_images_from_folder(folder, img_size=(224, 224)):\n",
        "    images = []\n",
        "    age_labels = []\n",
        "    gender_labels = []\n",
        "    for filename in os.listdir(folder):\n",
        "        if filename.endswith(\".jpg\") or filename.endswith(\".png\"):\n",
        "            img = cv2.imread(os.path.join(folder, filename))\n",
        "            img = cv2.resize(img, img_size)\n",
        "            img = img / 255.0  # Normalize pixel values\n",
        "            images.append(img)\n",
        "            age, gender = filename.split('_')[0:2]\n",
        "            age_labels.append(int(age))\n",
        "            gender_labels.append(int(gender))\n",
        "    images = np.array(images, dtype='float32')\n",
        "    age_labels = np.array(age_labels)\n",
        "    gender_labels = np.array(gender_labels)\n",
        "    return images, age_labels, gender_labels\n",
        "\n",
        "# Load the test data\n",
        "test_data_folder = '/content/drive/MyDrive/2000'  # Update this path to your folder of test images\n",
        "X_test, y_test_age, y_test_gender = load_images_from_folder(test_data_folder)\n",
        "\n",
        "# Load the models\n",
        "age_model_path = '/content/drive/MyDrive/2000/age2000_model.h5'\n",
        "gender_model_path = '/content/drive/MyDrive/2000/gender2000_model.h5'\n",
        "age_model = load_model(age_model_path)\n",
        "gender_model = load_model(gender_model_path)\n",
        "\n",
        "# Predict on the test data\n",
        "predicted_ages = age_model.predict(X_test).flatten()\n",
        "predicted_genders = gender_model.predict(X_test).flatten()\n",
        "\n",
        "# For gender, we need to convert probabilities to binary values (e.g., 0 or 1)\n",
        "predicted_genders_binary = np.round(predicted_genders)\n",
        "\n",
        "# Calculate Mean Absolute Error for age predictions\n",
        "mae = mean_absolute_error(y_test_age, predicted_ages)\n",
        "print(f\"Mean Absolute Error for Age Model: {mae}\")\n",
        "\n",
        "# Calculate classification metrics for gender predictions\n",
        "gender_accuracy = accuracy_score(y_test_gender, predicted_genders_binary)\n",
        "report = classification_report(y_test_gender, predicted_genders_binary, target_names=['Male', 'Female'])\n",
        "print(f\"Accuracy for Gender Model: {gender_accuracy}\")\n",
        "print(\"Classification Report for Gender Model:\")\n",
        "print(report)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0lPh9086PFtG"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mT8HLOcVPCDC"
      },
      "source": [
        "# New Section"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1O0xYkw6Avm6q-WYpdEXyFKTam5EySNUv",
      "authorship_tag": "ABX9TyMSM07/dLnQ1lo8kZ+qjPYl",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}